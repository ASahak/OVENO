{"ast":null,"code":"import _JSXStyle from \"styled-jsx/style\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport Head from 'next/head';\nimport { useRouter } from 'next/router';\nimport { Container, Row, Col } from 'reactstrap';\nimport axios from \"lib/axiosEnv\";\nimport Router from \"next/router\";\nimport { connect } from \"react-redux\";\nimport { toast } from \"react-toastify\";\nimport styles from \"components/Home/HotSellers/elements/badge.scss\";\nimport UI_ELEMENTS from \"../../components/shared/UI\";\n\nconst {\n  getToken\n} = require('utils/auth');\n\nimport Magnifier from \"react-magnifier\";\nimport { __SET_LOGGED } from \"store/saga\";\n\nconst ProductPage = props => {\n  const {\n    query\n  } = useRouter();\n  const {\n    0: dataProd,\n    1: setDataProd\n  } = useState({});\n  const {\n    0: star,\n    1: setStar\n  } = useState(0);\n  const {\n    0: loadingCategory,\n    1: setLoadingCategory\n  } = useState(false);\n  const {\n    0: addToCart,\n    1: setAddToCart\n  } = useState(true);\n  useEffect(() => {\n    try {\n      (async () => {\n        if (Router.query.id) {\n          const {\n            data\n          } = await axios.get('/api/product/' + Router.query.id);\n          if (data.error) throw Error(data.error.message);\n          setDataProd(data.product);\n\n          if (data.product.rating.length) {\n            setStar(Math.round(data.product.rating.reduce((acc, item) => {\n              acc += item.value;\n              return acc;\n            }, 0) / data.product.rating.length));\n          }\n        }\n      })();\n    } catch (err) {\n      toast.error(err.response ? err.response.data : err.message, {\n        position: \"top-right\",\n        autoClose: 3000,\n        pauseOnHover: false\n      });\n    }\n  }, [query]);\n  useEffect(() => {\n    // Check if you have an product like active product\n    if (props.isUser && dataProd && props.isUser.cart.some(el => el._id === dataProd._id)) {\n      setAddToCart(false);\n    }\n  }, [props.isUser, dataProd]);\n\n  const appreciate = async val => {\n    try {\n      if (!props.isUser) throw Error('Please login before appreciation!');\n      if (dataProd.rating.some(el => el.id === props.isUser._id)) throw Error(\"You can't appreciate second time\");\n      const {\n        data\n      } = await axios.post('/api/product/appreciate', {\n        userId: props.isUser._id,\n        id: dataProd._id,\n        value: val\n      }, {\n        headers: {\n          Authorization: getToken('token')\n        }\n      });\n      if (data.error) throw Error(data.error.message);\n      dataProd.rating = [...dataProd.rating, {\n        id: data.appreciate.id,\n        value: data.appreciate.value\n      }];\n      setDataProd(dataProd); // Set new rated Product\n\n      setStar(Math.round(dataProd.rating.reduce((acc, item) => {\n        acc += item.value;\n        return acc;\n      }, 0) / dataProd.rating.length));\n      toast.dark('The product is rated!', {\n        position: \"top-right\",\n        autoClose: 3000,\n        pauseOnHover: false\n      });\n    } catch (err) {\n      toast.error(err.response ? err.response.data : err.message, {\n        position: \"top-right\",\n        autoClose: 3000,\n        pauseOnHover: false\n      });\n    }\n  };\n\n  const addToCartProd = async () => {\n    try {\n      setLoadingCategory(true);\n      if (!props.isUser) throw Error('Please login before add product!');\n\n      if (props.isUser && dataProd && props.isUser.cart.some(el => el._id === dataProd._id)) {\n        throw Error(\"You have this product in your cart already!\");\n      }\n\n      const {\n        data\n      } = await axios.post('/api/cart/addToCart', {\n        userId: props.isUser._id,\n        id: dataProd._id,\n        count: 1\n      }, {\n        headers: {\n          Authorization: getToken('token')\n        }\n      });\n      if (data.error) throw Error(data.error);\n      props.isUser.cart.push({\n        _id: dataProd._id,\n        count: 1\n      });\n\n      __SET_LOGGED({\n        user: props.isUser\n      }).next();\n\n      setAddToCart(false);\n      toast.dark(data.message, {\n        position: \"top-right\",\n        autoClose: 3000,\n        pauseOnHover: false\n      });\n    } catch (err) {\n      toast.error(err.response ? err.response.data : err.message, {\n        position: \"top-right\",\n        autoClose: 3000,\n        pauseOnHover: false\n      });\n    } finally {\n      setLoadingCategory(false);\n    }\n  };\n\n  return __jsx(\"div\", {\n    className: \"jsx-2824650240\"\n  }, __jsx(Head, null, __jsx(\"title\", {\n    className: \"jsx-2824650240\"\n  }, \"Product\")), __jsx(Container, null, __jsx(Row, null, __jsx(Col, {\n    sm: \"12\",\n    md: \"6\"\n  }, __jsx(\"div\", {\n    className: \"jsx-2824650240\" + \" \" + \"product-image_wrap\"\n  }, dataProd._id ? __jsx(Magnifier, {\n    src: dataProd.photo.replace(/\\\\/g, \"/\"),\n    mgWidth: 200,\n    mgHeight: 200,\n    zoomFactor: 2.5,\n    width: '100%'\n  }) : __jsx(\"div\", {\n    className: \"jsx-2824650240\" + \" \" + \"product-image_wrap_loading\"\n  }, __jsx(\"img\", {\n    src: require('../../assets/images/loading.gif'),\n    className: \"jsx-2824650240\"\n  })))), dataProd._id && __jsx(React.Fragment, null, __jsx(Col, {\n    sm: \"12\",\n    md: \"6\"\n  }, __jsx(\"div\", {\n    className: \"jsx-2824650240\" + \" \" + \"product-details-wrap\"\n  }, __jsx(\"div\", {\n    className: \"jsx-2824650240\" + \" \" + \"product-details-wrap__highway\"\n  }, __jsx(\"span\", {\n    className: \"jsx-2824650240\" + \" \" + `highway_category ${!dataProd.subCategory ? 'highway_no_subCategory' : ''}`\n  }, dataProd.category), dataProd.subCategory && __jsx(\"span\", {\n    className: \"jsx-2824650240\" + \" \" + \"highway_subCategory\"\n  }, dataProd.subCategory)), __jsx(\"h4\", {\n    className: \"jsx-2824650240\"\n  }, dataProd.name), __jsx(\"div\", {\n    className: \"jsx-2824650240\" + \" \" + \"product-details-wrap__price\"\n  }, dataProd.sale !== 0 ? __jsx(React.Fragment, null, __jsx(\"span\", {\n    className: \"jsx-2824650240\" + \" \" + (styles['slider_item-bottom_price_real'] || \"\")\n  }, Math.round(dataProd.price - dataProd.price * dataProd.sale / 100), \"$\"), __jsx(\"span\", {\n    className: \"jsx-2824650240\" + \" \" + (styles['slider_item-bottom_price_del'] || \"\")\n  }, dataProd.price, \"$\")) : __jsx(\"span\", {\n    className: \"jsx-2824650240\" + \" \" + (styles['slider_item-bottom_price_real'] || \"\")\n  }, dataProd.price, \"$\")), __jsx(\"div\", {\n    className: \"jsx-2824650240\" + \" \" + \"product-details-wrap_stars\"\n  }, Array(5).fill('').map((_, index) => {\n    if (star > index) {\n      return __jsx(\"span\", {\n        key: index,\n        onClick: () => appreciate(index + 1),\n        className: \"jsx-2824650240\" + \" \" + \"lnr lnr-star\"\n      });\n    } else {\n      return __jsx(\"span\", {\n        key: index,\n        onClick: () => appreciate(index + 1),\n        className: \"jsx-2824650240\" + \" \" + \"lnr lnr-star half\"\n      });\n    }\n  })), __jsx(UI_ELEMENTS.Button, {\n    icon: loadingCategory ? {\n      dir: 'right',\n      element: 'loading'\n    } : {},\n    type: \"submit\",\n    disabled: !addToCart,\n    text: addToCart ? \"Add to cart\" : 'Already in your cart',\n    width: addToCart ? 170 : 200,\n    onClick: () => addToCartProd(),\n    margin: ['20px', '0', '0', '0'],\n    attr: [{\n      id: 'addBtn'\n    }],\n    size: \"sm\"\n  }))), __jsx(Col, {\n    sm: \"12\"\n  }, __jsx(\"div\", {\n    className: \"jsx-2824650240\" + \" \" + \"product-description\"\n  }, __jsx(\"h4\", {\n    className: \"jsx-2824650240\"\n  }, \"Description\"), __jsx(\"p\", {\n    className: \"jsx-2824650240\"\n  }, dataProd.description || 'No description')))))), __jsx(_JSXStyle, {\n    id: \"2824650240\"\n  }, [\".product-image_wrap.jsx-2824650240{margin-bottom:20px;}\"]));\n};\n\nconst mapStateToProps = state => ({\n  isUser: state.auth.user\n});\n\nconst mapDispatchToProps = {};\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductPage);","map":null,"metadata":{},"sourceType":"module"}