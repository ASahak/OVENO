{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport styles from \"./badge.scss\";\nimport React from \"react\";\nimport Icon from \"components/Icons/icon\";\nimport Link from 'next/link';\nimport ImageProd from \"components/Shop/elements/imageProduct\";\nimport { connect } from \"react-redux\";\nimport axios from \"lib/axiosEnv\";\nimport { toast } from \"react-toastify\";\n\nvar _require = require('utils/auth'),\n    getToken = _require.getToken;\n\nimport { __SET_LOGGED } from 'store/saga';\n\nvar Badge = function Badge(props) {\n  var star = Math.round(props.mainData.rating.reduce(function (acc, item) {\n    acc += item.value;\n    return acc;\n  }, 0) / props.mainData.rating.length);\n\n  var addToCartProd =\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var _ref2, data;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n\n              if (props.loggedUser) {\n                _context.next = 3;\n                break;\n              }\n\n              throw Error('Please login before add product!');\n\n            case 3:\n              if (!(props.loggedUser && props.mainData && props.loggedUser.cart.some(function (el) {\n                return el._id === props.mainData._id;\n              }))) {\n                _context.next = 5;\n                break;\n              }\n\n              throw Error(\"You have this product in your cart already!\");\n\n            case 5:\n              _context.next = 7;\n              return axios.post('/api/cart/addToCart', {\n                userId: props.loggedUser._id,\n                id: props.mainData._id,\n                count: 1\n              }, {\n                headers: {\n                  Authorization: getToken('token')\n                }\n              });\n\n            case 7:\n              _ref2 = _context.sent;\n              data = _ref2.data;\n\n              if (!data.error) {\n                _context.next = 11;\n                break;\n              }\n\n              throw Error(data.error);\n\n            case 11:\n              props.loggedUser.cart.push({\n                _id: props.mainData._id,\n                count: 1\n              });\n\n              __SET_LOGGED({\n                user: props.loggedUser\n              }).next();\n\n              toast.dark(data.message, {\n                position: \"top-right\",\n                autoClose: 3000,\n                pauseOnHover: false\n              });\n              _context.next = 19;\n              break;\n\n            case 16:\n              _context.prev = 16;\n              _context.t0 = _context[\"catch\"](0);\n              toast.error(_context.t0.response ? _context.t0.response.data : _context.t0.message, {\n                position: \"top-right\",\n                autoClose: 3000,\n                pauseOnHover: false\n              });\n\n            case 19:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 16]]);\n    }));\n\n    return function addToCartProd() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(\"div\", {\n    className: styles['slider_item']\n  }, __jsx(\"div\", {\n    className: styles['slider_item-top']\n  }, __jsx(ImageProd, {\n    src: props.mainData.photo\n  }), props.mainData.sale !== 0 && __jsx(\"span\", {\n    className: styles['slider_item-sale_badge']\n  }, \"Sale -\", props.mainData.sale, \"%\"), __jsx(\"div\", {\n    className: styles['slider_item-top_actions-links']\n  }, __jsx(\"span\", {\n    className: \"lnr lnr-cart\",\n    onClick: function onClick() {\n      return addToCartProd();\n    }\n  }), __jsx(Link, {\n    href: \"/product/\" + props.mainData._id\n  }, __jsx(\"a\", null, __jsx(\"span\", {\n    className: \"lnr lnr-eye\"\n  })))), __jsx(\"h4\", null, props.mainData.name)), __jsx(\"div\", {\n    className: styles['slider_item-bottom']\n  }, __jsx(\"div\", {\n    className: styles['slider_item-bottom_price']\n  }, props.mainData.sale !== 0 ? __jsx(React.Fragment, null, __jsx(\"span\", {\n    className: styles['slider_item-bottom_price_real']\n  }, Math.round(props.mainData.price - props.mainData.price * props.mainData.sale / 100), \"$\"), __jsx(\"span\", {\n    className: styles['slider_item-bottom_price_del']\n  }, props.mainData.price, \"$\")) : __jsx(\"span\", {\n    className: styles['slider_item-bottom_price_real']\n  }, props.mainData.price, \"$\")), __jsx(\"div\", {\n    className: styles['slider_item-bottom_stars']\n  }, Array(5).fill('').map(function (_, index) {\n    if (star > index) {\n      return __jsx(\"span\", {\n        className: \"lnr lnr-star\",\n        key: index\n      });\n    } else {\n      return __jsx(\"span\", {\n        className: \"lnr lnr-star half\",\n        key: index\n      });\n    }\n  }))), !props.noAccessAdmin && (props.isAdmin || props.loggedUser && props.loggedUser._id && props.mainData.owner) ? __jsx(\"div\", {\n    className: styles['user-options']\n  }, __jsx(\"span\", {\n    onClick: function onClick() {\n      return props.editProduct(props.mainData);\n    }\n  }, __jsx(Icon, {\n    name: \"pencil\"\n  })), __jsx(\"span\", {\n    onClick: function onClick() {\n      return props.removeProduct(props.mainData._id);\n    }\n  }, __jsx(Icon, {\n    name: \"delete\"\n  }))) : '');\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    loggedUser: state.auth.user\n  };\n};\n\nvar mapDispatchToProps = {};\nexport default connect(mapStateToProps, mapDispatchToProps)(Badge);","map":null,"metadata":{},"sourceType":"module"}