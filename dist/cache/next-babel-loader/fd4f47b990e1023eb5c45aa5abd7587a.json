{"ast":null,"code":"var _Promise = require(\"@babel/runtime-corejs2/core-js/promise\");\n\nconst cookie = require('js-cookie');\n\nconst axios = require('axios');\n\nconst jwtDecode = require('jwt-decode');\n\nmodule.exports = {\n  setToken: token => {\n    cookie.set('token', token, {\n      expires: 1\n      /*1 day*/\n\n    });\n  },\n  getToken: () => {\n    return cookie.get('token');\n  },\n  getCookieByKey: key => {\n    return cookie.get(key);\n  },\n  removeCookieByKey: key => {\n    cookie.remove(key);\n  },\n  isLoggedUser: () => {\n    return new _Promise(async (resolve, reject) => {\n      const token = module.exports.getToken();\n\n      try {\n        if (token) {\n          const user = await axios.get('/api/user/' + jwtDecode(token).userId);\n\n          if (user) {\n            if (user.data.error) reject(user.data.error);\n            resolve(user);\n          }\n        } else reject(\"There isn't logged user\");\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/arthu/OneDrive/Desktop/Important/daser/next/OVENO/utils/auth.js"],"names":["cookie","require","axios","jwtDecode","module","exports","setToken","token","set","expires","getToken","get","getCookieByKey","key","removeCookieByKey","remove","isLoggedUser","resolve","reject","user","userId","data","error","err"],"mappings":";;AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,WAAD,CAAtB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,YAAD,CAAzB;;AAEAG,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,QAAQ,EAAGC,KAAD,IAAW;AACjBP,IAAAA,MAAM,CAACQ,GAAP,CAAW,OAAX,EAAoBD,KAApB,EAA2B;AAACE,MAAAA,OAAO,EAAE;AAAE;;AAAZ,KAA3B;AACH,GAHY;AAKbC,EAAAA,QAAQ,EAAE,MAAM;AACZ,WAAOV,MAAM,CAACW,GAAP,CAAW,OAAX,CAAP;AACH,GAPY;AASbC,EAAAA,cAAc,EAAGC,GAAD,IAAS;AACrB,WAAOb,MAAM,CAACW,GAAP,CAAWE,GAAX,CAAP;AACH,GAXY;AAabC,EAAAA,iBAAiB,EAAGD,GAAD,IAAS;AACxBb,IAAAA,MAAM,CAACe,MAAP,CAAcF,GAAd;AACH,GAfY;AAgBbG,EAAAA,YAAY,EAAE,MAAM;AAChB,WAAO,aAAY,OAAOC,OAAP,EAAgBC,MAAhB,KAA2B;AAC1C,YAAMX,KAAK,GAAGH,MAAM,CAACC,OAAP,CAAeK,QAAf,EAAd;;AACA,UAAI;AACA,YAAIH,KAAJ,EAAW;AACP,gBAAMY,IAAI,GAAG,MAAMjB,KAAK,CAACS,GAAN,CAAU,eAAeR,SAAS,CAACI,KAAD,CAAT,CAAiBa,MAA1C,CAAnB;;AACA,cAAID,IAAJ,EAAU;AACN,gBAAIA,IAAI,CAACE,IAAL,CAAUC,KAAd,EAAqBJ,MAAM,CAACC,IAAI,CAACE,IAAL,CAAUC,KAAX,CAAN;AACrBL,YAAAA,OAAO,CAACE,IAAD,CAAP;AACH;AACJ,SAND,MAMOD,MAAM,CAAC,yBAAD,CAAN;AACV,OARD,CAQE,OAAOK,GAAP,EAAY;AACVL,QAAAA,MAAM,CAACK,GAAD,CAAN;AACH;AACJ,KAbM,CAAP;AAcH;AA/BY,CAAjB","sourcesContent":["const cookie = require('js-cookie');\r\nconst axios = require('axios');\r\nconst jwtDecode = require('jwt-decode');\r\n\r\nmodule.exports = {\r\n    setToken: (token) => {\r\n        cookie.set('token', token, {expires: 1 /*1 day*/});\r\n    },\r\n\r\n    getToken: () => {\r\n        return cookie.get('token');\r\n    },\r\n\r\n    getCookieByKey: (key) => {\r\n        return cookie.get(key);\r\n    },\r\n\r\n    removeCookieByKey: (key) => {\r\n        cookie.remove(key);\r\n    },\r\n    isLoggedUser: () => {\r\n        return new Promise(async (resolve, reject) => {\r\n            const token = module.exports.getToken();\r\n            try {\r\n                if (token) {\r\n                    const user = await axios.get('/api/user/' + jwtDecode(token).userId);\r\n                    if (user) {\r\n                        if (user.data.error) reject(user.data.error);\r\n                        resolve(user);\r\n                    }\r\n                } else reject(\"There isn't logged user\")\r\n            } catch (err) {\r\n                reject(err)\r\n            }\r\n        })\r\n    },\r\n};\r\n"]},"metadata":{},"sourceType":"script"}