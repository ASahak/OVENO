{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport axios from \"lib/axiosEnv\";\nimport { connect } from \"react-redux\";\nimport { Col, Container, Row } from \"reactstrap\";\nimport { toast } from \"react-toastify\";\nimport UI_ELEMENTS from \"../components/shared/UI\";\nimport { EMAIL_VALIDATOR, FULL_NAME_VALIDATOR, PASSWORD_VALIDATOR } from \"utils\";\nimport { useForm } from \"react-hook-form\";\nimport ImageProd from \"components/Shop/elements/imageProduct\";\n\nvar _require = require('utils/auth'),\n    getToken = _require.getToken;\n\nvar Account = function Account(props) {\n  var _useState = useState(null),\n      uploadedFile = _useState[0],\n      setUploadedFile = _useState[1];\n\n  var _useState2 = useState(''),\n      avatar = _useState2[0],\n      setAvatar = _useState2[1];\n\n  var _useState3 = useState(false),\n      loadingRegister = _useState3[0],\n      setLoadingRegister = _useState3[1];\n\n  var _useState4 = useState(false),\n      updatePassword = _useState4[0],\n      setUpdatePassword = _useState4[1];\n\n  var _useForm = useForm({\n    mode: 'onBlur'\n  }),\n      register = _useForm.register,\n      handleSubmit = _useForm.handleSubmit,\n      watch = _useForm.watch,\n      errors = _useForm.errors,\n      setValue = _useForm.setValue;\n\n  var uploadImage = useCallback(function (e) {\n    if (e.target.files[0]) {\n      setAvatar('');\n      setUploadedFile(e.target.files[0]);\n      var reader = new FileReader();\n\n      reader.onload = function (e) {\n        setAvatar(e.target.result);\n      };\n\n      reader.readAsDataURL(e.target.files[0]);\n    }\n  }, []);\n  useEffect(function () {\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var _props$isUser, name, email;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (props.isUser) {\n                setAvatar(props.isUser.avatar);\n                _props$isUser = props.isUser, name = _props$isUser.name, email = _props$isUser.email;\n                setValue('name', name);\n                setValue('email', email);\n              }\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  }, [props.isUser]);\n\n  var onSubmit =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2(dataForm) {\n      var formData, dataImage, _ref3, data;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              setLoadingRegister(true);\n              _context2.prev = 1;\n\n              if (!uploadedFile) {\n                _context2.next = 13;\n                break;\n              }\n\n              formData = new FormData();\n              formData.append('photo', uploadedFile);\n              _context2.next = 7;\n              return axios.post('/api/product/upload', formData, {\n                headers: {\n                  Authorization: getToken('token')\n                },\n                \"Accept\": \"application/json\"\n              });\n\n            case 7:\n              dataImage = _context2.sent;\n\n              if (!dataImage.data.error) {\n                _context2.next = 10;\n                break;\n              }\n\n              throw dataImage.data.error;\n\n            case 10:\n              dataForm.avatar = dataImage.data.file.path.replace(/public/g, '');\n              _context2.next = 14;\n              break;\n\n            case 13:\n              dataForm.avatar = props.isUser.avatar;\n\n            case 14:\n              _context2.next = 16;\n              return axios.put('/api/update/user', _objectSpread({\n                _id: props.isUser._id,\n                email: dataForm.email\n              }, dataForm.password && {\n                password: dataForm.password,\n                password_repeat: dataForm.password\n              }, {\n                name: dataForm.name,\n                avatar: dataForm.avatar\n              }));\n\n            case 16:\n              _ref3 = _context2.sent;\n              data = _ref3.data;\n\n              if (!data.error) {\n                _context2.next = 20;\n                break;\n              }\n\n              throw data.error;\n\n            case 20:\n              toast.dark('Account updated successfully!', {\n                position: \"top-right\",\n                autoClose: 3000,\n                pauseOnHover: false\n              });\n              _context2.next = 26;\n              break;\n\n            case 23:\n              _context2.prev = 23;\n              _context2.t0 = _context2[\"catch\"](1);\n              toast.error(_context2.t0.response ? _context2.t0.response.data : _context2.t0.message, {\n                position: \"top-right\",\n                autoClose: 3000,\n                pauseOnHover: false\n              });\n\n            case 26:\n              _context2.prev = 26;\n              setUploadedFile('');\n              setLoadingRegister(false);\n              return _context2.finish(26);\n\n            case 30:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[1, 23, 26, 30]]);\n    }));\n\n    return function onSubmit(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var password = useRef({});\n  password.current = watch(\"password\", \"\");\n  return __jsx(Container, null, __jsx(Row, null, __jsx(Col, {\n    sm: {\n      size: 12\n    },\n    md: {\n      size: 10,\n      offset: 1\n    },\n    lg: {\n      size: 8,\n      offset: 2\n    }\n  }, __jsx(\"div\", {\n    className: \"contact-main-wrap\"\n  }, __jsx(\"div\", {\n    className: \"avatar-wrap\"\n  }, props.isUser && __jsx(\"label\", {\n    htmlFor: \"imageAvatar\",\n    className: \"image-upload\"\n  }, __jsx(\"input\", {\n    type: \"file\",\n    id: \"imageAvatar\",\n    hidden: true,\n    onChange: uploadImage\n  }), __jsx(\"span\", {\n    className: \"lnr lnr-camera\"\n  })), __jsx(ImageProd, {\n    src: avatar\n  })), __jsx(\"form\", {\n    onSubmit: handleSubmit(onSubmit)\n  }, __jsx(UI_ELEMENTS.Input, {\n    type: \"text\",\n    name: \"name\",\n    refBind: register(FULL_NAME_VALIDATOR),\n    errors: errors.name && errors.name.message,\n    fullWidth: true,\n    placeholder: \"Name\",\n    size: \"md\"\n  }), __jsx(UI_ELEMENTS.Input, {\n    type: \"email\",\n    name: \"email\",\n    attr: [{\n      name: 'disabled',\n      value: true\n    }],\n    refBind: register(EMAIL_VALIDATOR),\n    errors: errors.email && errors.email.message,\n    fullWidth: true,\n    placeholder: \"Email ID\",\n    size: \"md\"\n  }), updatePassword ? __jsx(React.Fragment, null, __jsx(UI_ELEMENTS.Input, {\n    refBind: register(PASSWORD_VALIDATOR),\n    errors: errors.password && errors.password.message || errors.password && errors.password.type === 'containsDigit' && 'Use 1 ore more numbers' || errors.password && errors.password.type === 'containsUppercase' && 'Use upper and lower case characters',\n    name: \"password\",\n    type: \"password\",\n    fullWidth: true,\n    placeholder: \"New Password\",\n    size: \"md\"\n  }), __jsx(UI_ELEMENTS.Input, {\n    refBind: register({\n      validate: function validate(value) {\n        return value === password.current || \"The passwords do not match\";\n      }\n    }),\n    errors: errors.password_repeat && errors.password_repeat.message,\n    name: \"password_repeat\",\n    type: \"password\",\n    fullWidth: true,\n    placeholder: \"Confirm Password\",\n    size: \"md\"\n  })) : null, __jsx(\"div\", {\n    className: \"button-wrap-account\"\n  }, __jsx(\"a\", {\n    onClick: function onClick() {\n      return setUpdatePassword(function (prevState) {\n        return !prevState;\n      });\n    }\n  }, !updatePassword ? 'Change password' : 'Unset password'), __jsx(UI_ELEMENTS.Button, {\n    disabled: !props.isUser,\n    margin: ['0px', '0', '0', 'auto'],\n    icon: loadingRegister ? {\n      dir: 'right',\n      element: 'loading'\n    } : {},\n    type: \"submit\",\n    text: \"Save\",\n    width: 150\n  })))))));\n};\n\nAccount.getInitialProps =\n/*#__PURE__*/\nfunction () {\n  var _ref4 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3(ctx) {\n    var req, res, token;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            req = ctx.req, res = ctx.res;\n            token = req.headers.cookie;\n            if (!token) res.redirect('/');\n            return _context3.abrupt(\"return\", {\n              status: true\n            });\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function (_x2) {\n    return _ref4.apply(this, arguments);\n  };\n}();\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    isUser: state.auth.user\n  };\n};\n\nvar mapDispatchToProps = {};\nexport default connect(mapStateToProps, mapDispatchToProps)(Account);","map":null,"metadata":{},"sourceType":"module"}