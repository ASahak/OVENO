{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { Container, Row, Col } from 'reactstrap';\nimport classesMiddleWrap from './middleWrap.scss';\nimport Router from 'next/router';\nimport { ModalToggle } from \"utils/common\";\nimport { connect } from \"react-redux\";\nimport axios from \"lib/axiosEnv\";\nimport { Bus } from \"lib/EventEmitter\";\n\nconst {\n  getToken\n} = require('utils/auth');\n\nclass MiddleWrap extends React.Component {\n  constructor(props) {\n    super(props);\n    this.cartRef = React.createRef();\n    this._modal = new ModalToggle();\n    this.state = {\n      dataCart: []\n    };\n    this.searchRef = React.createRef();\n    Bus.subscribe('filterByCategory', reset => {\n      if (reset && reset.searchReset && this.searchRef.current) {\n        this.searchRef.current.value = '';\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    Bus.unsubscribe('filterByCategory');\n  }\n\n  componentDidMount() {\n    if (Router.router.components.hasOwnProperty('/shop')) {\n      setTimeout(() => {\n        const query = _objectSpread({}, Router.query);\n\n        this.searchRef.current.value = query.name || '';\n      }, 0);\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevProps.isUser !== this.props.isUser) {\n      (async () => {\n        const {\n          data\n        } = await axios.get('/api/cart/getCart', {\n          headers: {\n            Authorization: getToken('token')\n          },\n          params: {\n            ids: [...this.props.isUser.cart.map(id => id._id)]\n          }\n        });\n\n        if (data.error) {\n          console.error(data.error);\n          return;\n        }\n\n        this.setState({\n          dataCart: (() => {\n            const cart = [];\n            this.props.isUser.cart.forEach(item => {\n              const findMatched = data.products.find(el => el._id === item._id);\n\n              if (findMatched) {\n                cart.push({\n                  id: item._id,\n                  name: findMatched.name,\n                  count: item.count,\n                  imgPath: findMatched.photo\n                });\n              } else {\n                // Detect Already Removed Products\n                cart.push({\n                  removed: true\n                });\n              }\n            });\n            return cart.slice(0, 2);\n          })()\n        });\n      })();\n    }\n  }\n\n  __showLangModal(ref, hint) {\n    return ref.current && this._modal.showModal(ref.current, false, hint);\n  }\n\n  __hideModal() {\n    this._modal.customHideModal();\n  }\n\n  searchByName() {\n    if (this.searchRef.current) {\n      const query = _objectSpread({}, Router.query);\n\n      Router.push({\n        pathname: '/shop',\n        query: _objectSpread({}, query, {\n          name: this.searchRef.current.value\n        })\n      }).then(() => Bus.dispatch('filterByCategory'));\n    }\n  }\n\n  triggerSearchName(evt) {\n    if (evt.key === 'Enter') {\n      this.searchByName();\n    }\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      className: classesMiddleWrap.middle_content_header\n    }, __jsx(Container, null, __jsx(Row, {\n      className: \"align-items-center\"\n    }, __jsx(Col, {\n      xs: \"7\",\n      sm: \"7\",\n      md: \"4\",\n      className: classesMiddleWrap.logo_content\n    }, __jsx(\"a\", {\n      href: \"/\",\n      className: \"d-inline-flex align-items-center justify-content-md-start justify-content-center\"\n    }, __jsx(\"img\", {\n      className: \"mr-2\",\n      src: require('../../../../assets/images/logo.png'),\n      alt: \"\"\n    }), \"VENO\")), __jsx(Col, {\n      xs: \"12\",\n      sm: \"12\",\n      md: \"5\",\n      className: classesMiddleWrap.search_block\n    }, __jsx(\"div\", {\n      id: classesMiddleWrap.main_search\n    }, __jsx(\"div\", {\n      className: classesMiddleWrap.search_wrap\n    }, __jsx(\"input\", {\n      type: \"text\",\n      ref: this.searchRef,\n      onKeyPress: e => this.triggerSearchName(e),\n      placeholder: \"Search entire store here...\"\n    }), __jsx(\"button\", {\n      type: \"button\",\n      onClick: () => this.searchByName()\n    }, __jsx(\"span\", {\n      className: \"lnr lnr-magnifier\"\n    }))))), this.props.isUser ? __jsx(Col, {\n      xs: \"5\",\n      sm: \"5\",\n      md: \"3\",\n      className: classesMiddleWrap.cart_item_parent\n    }, __jsx(\"a\", {\n      className: classesMiddleWrap.cart_wrap,\n      onClick: this.__showLangModal.bind(this, this.cartRef, 'noClose')\n    }, __jsx(\"span\", {\n      className: `${classesMiddleWrap.lnr} lnr lnr-cart`\n    }), \"My cart: \", this.props.isUser.cart.length, \" item\", __jsx(\"i\", {\n      className: `${classesMiddleWrap.fas} fas fa-angle-down`\n    })), __jsx(ShopCart, {\n      hideModal: this.__hideModal.bind(this),\n      ref: this.cartRef,\n      data: this.state.dataCart\n    })) : '')));\n  }\n\n}\n\nconst ShopCart = React.forwardRef(({\n  data,\n  noHide,\n  hideModal\n}, ref) => {\n  let _cart = data.map((item, index) => __jsx(\"li\", {\n    key: item.removed ? index : item.id,\n    className: classesMiddleWrap['main-cart-modal-item']\n  }, item.removed ? __jsx(\"span\", null, \"This Item removed\") : __jsx(React.Fragment, null, __jsx(\"span\", null, __jsx(\"img\", {\n    src: item.imgPath,\n    alt: \"no image\"\n  }), __jsx(\"b\", null, item.name)), __jsx(\"div\", null, __jsx(\"span\", null, \"x \", __jsx(\"br\", null), item.count)))));\n\n  return __jsx(\"div\", {\n    className: classesMiddleWrap['main-cart-modal'],\n    ref: ref\n  }, data.length ? __jsx(React.Fragment, null, __jsx(\"ul\", null, _cart), __jsx(\"a\", {\n    href: \"/cart\",\n    className: classesMiddleWrap['view-all-cart-btn'],\n    onClick: hideModal\n  }, \"View All\")) : 'You dont have any added product in your cart yet');\n});\n\nconst mapStateToProps = state => ({\n  isUser: state.auth.user\n});\n\nconst mapDispatchToProps = {};\nexport default connect(mapStateToProps, mapDispatchToProps)(MiddleWrap);","map":null,"metadata":{},"sourceType":"module"}