{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport styles from './style.scss';\nimport Badge from 'components/Home/HotSellers/elements/Badge';\nimport { Row, Col } from 'reactstrap';\nimport axios from \"lib/axiosEnv\";\nimport { toast } from \"react-toastify\";\nimport { RANGE_SLIDER } from 'utils';\n\nconst {\n  getToken\n} = require('utils/auth');\n\nimport Router from 'next/router';\nimport { Bus } from \"lib/EventEmitter\";\nexport default class Products extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"componentDidMount\", async () => {\n      // Get All products\n      try {\n        const data = await this.getItems();\n        if (!data.status || data.error) throw Error(data.error);\n        const dataCount = await axios.get('/api/products/getCount', {\n          params: this.returnParams()\n        });\n        if (dataCount.data.error) throw Error(dataCount.data.error);\n        this.setState({\n          productAllCount: dataCount.data.count,\n          productsData: data.products\n        });\n      } catch (err) {\n        this.setState({\n          productsData: []\n        });\n        toast.error(err.response ? err.response.data : err.message, {\n          position: \"top-right\",\n          autoClose: 3000,\n          pauseOnHover: false\n        });\n      }\n    });\n\n    this.state = {\n      productsData: null,\n      pageSize: 8,\n      activePage: 1,\n      productAllCount: null,\n      categorySlug: null,\n      subCategorySlug: null\n    };\n    this.removeProduct = this.removeProduct.bind(this);\n    this.filterByPage = this.filterByPage.bind(this);\n    this.getItems = this.getItems.bind(this);\n    this.returnParams = this.returnParams.bind(this);\n    Bus.subscribe('filterByCategory', async () => {\n      // Detect changes of category and Subcategory router params\n      try {\n        const data = await this.getItems();\n        if (data.error) throw Error(data.error);\n        const dataCount = await axios.get('/api/products/getCount', {\n          params: this.returnParams()\n        });\n        if (dataCount.data.error) throw Error(dataCount.data.error.message);\n        this.setState({\n          productAllCount: dataCount.data.count,\n          activePage: 1,\n          productsData: data.products\n        });\n      } catch (err) {\n        toast.error(err.response ? err.response.data : err.message, {\n          position: \"top-right\",\n          autoClose: 3000,\n          pauseOnHover: false\n        });\n      }\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevProps.filterByRange !== this.props.filterByRange) {\n      // Detecting changes of Range Slider\n      const [min, max] = this.props.filterByRange;\n      Router.push({\n        pathname: Router.pathname,\n        query: _objectSpread({}, Router.query, {\n          page: 1,\n          minPrice: min,\n          maxPrice: max\n        })\n      }).then(async () => {\n        const dataCount = await axios.get('/api/products/getCount', {\n          params: this.returnParams()\n        });\n        if (dataCount.data.error) throw Error(dataCount.data.error);\n        const data = await this.getItems();\n        this.setState({\n          activePage: 1,\n          productAllCount: dataCount.data.count,\n          productsData: data.products\n        });\n      });\n    }\n\n    if (prevProps.updatedProduct !== this.props.updatedProduct) {\n      // Detecting changes of add or edit product\n      const prevDataProds = [...this.state.productsData];\n\n      if (this.props.updatedProduct.type === 'edit') {\n        const updatedIndex = prevDataProds.findIndex(e => e._id === this.props.updatedProduct._id);\n\n        if (updatedIndex > -1) {\n          prevDataProds[updatedIndex] = this.props.updatedProduct;\n          this.setState({\n            productsData: prevDataProds\n          });\n        }\n      } else if (this.props.updatedProduct.type === 'add') {\n        prevDataProds.push(this.props.updatedProduct);\n        this.setState({\n          productsData: prevDataProds\n        });\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    Bus.unsubscribe('filterByCategory');\n  }\n\n  returnParams() {\n    const params = new URLSearchParams(window.location.search);\n    const page = params.get('page') || 1;\n    const limit = this.state.pageSize;\n    const category = params.get('category');\n    const name = params.get('name');\n    const subCategory = params.get('subCategory');\n    const filterMin = params.get('minPrice') || RANGE_SLIDER[0];\n    const filterMax = params.get('maxPrice') || RANGE_SLIDER[1];\n    return {\n      name,\n      limit,\n      page,\n      category,\n      subCategory,\n      filterMin,\n      filterMax\n    };\n  }\n\n  async getItems() {\n    const params = new URLSearchParams(window.location.search);\n    let page = params.get('page');\n\n    if (page) {\n      this.setState({\n        activePage: +page\n      });\n    } else page = 1;\n\n    const {\n      data\n    } = await axios.get('/api/products/get', {\n      params: _objectSpread({}, this.returnParams(), {\n        page\n      })\n    });\n    return data;\n  }\n\n  filterByPage(page) {\n    Router.push({\n      pathname: Router.pathname,\n      query: _objectSpread({}, Router.query, {\n        page: page\n      })\n    }).then(async () => {\n      const data = await this.getItems();\n      this.setState({\n        activePage: +page,\n        productsData: data.products\n      });\n    });\n  }\n\n  async removeProduct(dataId) {\n    try {\n      const {\n        data\n      } = await axios.delete('/api/product/delete', {\n        headers: {\n          Authorization: getToken('token')\n        },\n        data: {\n          id: dataId\n        }\n      });\n      if (data.error) throw Error(data.error);\n      const dataProds = await this.getItems();\n      if (!dataProds.status || dataProds.error) throw Error(dataProds.error);\n      const dataCount = await axios.get('/api/products/getCount', {\n        params: this.returnParams()\n      });\n      if (dataCount.data.error) throw Error(dataCount.data.error);\n      this.setState({\n        productAllCount: dataCount.data.count,\n        productsData: dataProds.products\n      });\n      toast.dark(data.message, {\n        position: \"top-right\",\n        autoClose: 3000,\n        pauseOnHover: false\n      });\n    } catch (err) {\n      toast.error(err.response ? err.response.data : err.message, {\n        position: \"top-right\",\n        autoClose: 3000,\n        pauseOnHover: false\n      });\n    }\n  }\n\n  render() {\n    return __jsx(React.Fragment, null, __jsx(Row, {\n      className: styles['main-shop_content']\n    }, !this.state.productsData ? __jsx(\"img\", {\n      className: styles['main-shop_content_loading_gif'],\n      src: require('../../../assets/images/loading.gif'),\n      alt: \"\"\n    }) : this.state.productsData.length ? this.state.productsData.map(slide => __jsx(Col, {\n      md: 4,\n      sm: 6,\n      lg: 3,\n      key: slide._id\n    }, \" \", __jsx(Badge, {\n      isAdmin: this.props.isAdmin,\n      isUser: this.props.isUser,\n      removeProduct: this.removeProduct,\n      editProduct: this.props.openEditModal,\n      mainData: slide\n    }))) : __jsx(Col, {\n      sm: 12\n    }, __jsx(\"p\", {\n      className: styles['main-shop_content_no-result']\n    }, \"No result!\"))), __jsx(\"div\", {\n      className: styles['pagination-wrap']\n    }, new Array(Math.ceil(this.state.productAllCount / this.state.pageSize)).fill('').map((_el, index) => __jsx(\"span\", {\n      key: index,\n      className: this.state.activePage === index + 1 ? 'activeBtn' : '',\n      onClick: () => this.filterByPage(index + 1)\n    }, index + 1))));\n  }\n\n}\nProducts.defaultProps = {\n  isAdmin: false,\n  isUser: false,\n  filterByRange: RANGE_SLIDER\n};","map":null,"metadata":{},"sourceType":"module"}