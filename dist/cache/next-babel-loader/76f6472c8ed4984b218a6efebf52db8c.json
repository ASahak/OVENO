{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useRef, useCallback } from 'react';\nimport { useRouter } from 'next/router';\nimport axios from \"lib/axiosEnv\";\nimport { connect } from \"react-redux\";\nimport { Col, Container, Row } from \"reactstrap\";\nimport { toast } from \"react-toastify\";\nimport UI_ELEMENTS from \"../components/shared/UI\";\nimport { EMAIL_VALIDATOR, PASSWORD_VALIDATOR } from \"utils\";\nimport Head from \"next/head\";\nimport { useForm } from \"react-hook-form\";\n\nconst ResetPassword = props => {\n  const router = useRouter();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    register,\n    handleSubmit,\n    watch,\n    errors,\n    reset\n  } = useForm({\n    mode: 'onBlur'\n  });\n\n  const onSubmit = async dataForm => {\n    setLoading(true);\n\n    try {\n      if (router.query.token) {\n        const {\n          data\n        } = await axios.put('/api/reset-password', {\n          resetLink: router.query.token,\n          newPassword: dataForm.password\n        });\n        if (data.error) throw Error(data.error);\n        toast.dark(data.message, {\n          position: \"top-right\",\n          autoClose: 3000,\n          pauseOnHover: false\n        });\n        setTimeout(() => {\n          location.href = '/login';\n        }, 3000);\n      } else {\n        const {\n          data\n        } = await axios.put('/api/forget-password', dataForm);\n        if (data.error) throw Error(data.error);\n        toast.dark(data.message, {\n          position: \"top-right\",\n          autoClose: 3000,\n          pauseOnHover: false\n        });\n      }\n    } catch (err) {\n      toast.error(err.message, {\n        position: \"top-right\",\n        autoClose: 3000,\n        pauseOnHover: false\n      });\n    } finally {\n      setLoading(false);\n    }\n\n    reset();\n  };\n\n  const password = useRef({});\n  password.current = watch(\"password\", \"\");\n  const Title = useCallback(() => {\n    return !router.query.token ? 'Forget Password' : 'Reset Password';\n  }, [router.query.token]);\n  return __jsx(Container, null, __jsx(Head, null, __jsx(\"title\", null, Title())), __jsx(Row, null, __jsx(Col, {\n    sm: {\n      size: 12\n    },\n    md: {\n      size: 10,\n      offset: 1\n    },\n    lg: {\n      size: 8,\n      offset: 2\n    }\n  }, __jsx(\"div\", {\n    className: \"contact-main-wrap\"\n  }, __jsx(\"form\", {\n    onSubmit: handleSubmit(onSubmit)\n  }, __jsx(\"h3\", null, Title()), !router.query.token ? __jsx(UI_ELEMENTS.Input, {\n    type: \"email\",\n    name: \"email\",\n    refBind: register(EMAIL_VALIDATOR),\n    errors: errors.email && errors.email.message,\n    fullWidth: true,\n    placeholder: \"Email ID\",\n    size: \"md\"\n  }) : __jsx(React.Fragment, null, __jsx(UI_ELEMENTS.Input, {\n    refBind: register(PASSWORD_VALIDATOR),\n    errors: errors.password && errors.password.message || errors.password && errors.password.type === 'containsDigit' && 'Use 1 ore more numbers' || errors.password && errors.password.type === 'containsUppercase' && 'Use upper and lower case characters',\n    name: \"password\",\n    type: \"password\",\n    fullWidth: true,\n    placeholder: \"New Password\",\n    size: \"md\"\n  }), __jsx(UI_ELEMENTS.Input, {\n    refBind: register({\n      validate: value => value === password.current || \"The passwords do not match\"\n    }),\n    errors: errors.password_repeat && errors.password_repeat.message,\n    name: \"password_repeat\",\n    type: \"password\",\n    fullWidth: true,\n    placeholder: \"Confirm Password\",\n    size: \"md\"\n  })), __jsx(UI_ELEMENTS.Button, {\n    icon: loading ? {\n      dir: 'right',\n      element: 'loading'\n    } : {},\n    type: \"submit\",\n    text: router.query.token ? 'Reset' : 'Send',\n    width: 100\n  }))))));\n};\n\nResetPassword.getInitialProps = async ctx => {\n  const {\n    req,\n    res\n  } = ctx;\n  const token = req && req.headers.cookie;\n  if (token) res.redirect('/');\n  return {\n    status: true\n  };\n};\n\nconst mapStateToProps = state => ({\n  isUser: state.auth.user\n});\n\nconst mapDispatchToProps = {};\nexport default connect(mapStateToProps, mapDispatchToProps)(ResetPassword);","map":null,"metadata":{},"sourceType":"module"}