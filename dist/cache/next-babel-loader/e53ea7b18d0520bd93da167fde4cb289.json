{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport UI_ELEMENTS from \"components/shared/UI\";\nimport { ONLY_DIGITS, PRODUCT_NAME, SELECT_OPTION } from \"utils\";\nimport Icon from \"components/Icons/icon\";\nimport styles from './style.scss';\nimport { useForm } from \"react-hook-form\";\nimport axios from \"lib/axiosEnv\";\nimport { toast } from \"react-toastify\";\n\nvar _require = require('utils/auth'),\n    getToken = _require.getToken;\n\nvar FormAdd = function FormAdd(props) {\n  var _useState = useState(false),\n      loadingCategory = _useState[0],\n      setLoadingCategory = _useState[1];\n\n  var _useState2 = useState(''),\n      uploadedImg = _useState2[0],\n      setUploadedImg = _useState2[1];\n\n  var _useState3 = useState(null),\n      uploadedFile = _useState3[0],\n      setUploadedFile = _useState3[1];\n\n  var _useState4 = useState(''),\n      hiddenImgValue = _useState4[0],\n      setHiddenImgValue = _useState4[1];\n\n  var _useState5 = useState([]),\n      options = _useState5[0],\n      setOptions = _useState5[1];\n\n  var _useState6 = useState([]),\n      subOptions = _useState6[0],\n      setSubOptions = _useState6[1];\n\n  var _useForm = useForm({\n    mode: 'onBlur'\n  }),\n      register = _useForm.register,\n      handleSubmit = _useForm.handleSubmit,\n      errors = _useForm.errors,\n      reset = _useForm.reset,\n      setValue = _useForm.setValue;\n\n  var onSubmit =\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(dataCategory) {\n      var dataForm, _ref2, data, dataProd, _dataProd;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setLoadingCategory(true);\n              _context.prev = 1;\n\n              if (!uploadedFile) {\n                _context.next = 16;\n                break;\n              }\n\n              dataForm = new FormData();\n              dataForm.append('photo', uploadedFile);\n              _context.next = 7;\n              return axios.post('/api/product/upload', dataForm, {\n                headers: {\n                  Authorization: getToken('token')\n                },\n                \"Accept\": \"application/json\"\n              });\n\n            case 7:\n              _ref2 = _context.sent;\n              data = _ref2.data;\n\n              if (!data.error) {\n                _context.next = 11;\n                break;\n              }\n\n              throw Error(data.error);\n\n            case 11:\n              dataCategory.photo = data.file.path.replace(/public/g, ''); // Send notification to teh all subscribed users\n\n              _context.next = 14;\n              return axios.post('/api/sendMail', {\n                mailToSubscribers: true\n              });\n\n            case 14:\n              _context.next = 17;\n              break;\n\n            case 16:\n              dataCategory.photo = 'default-placeholder.png';\n\n            case 17:\n              if (!props.isEdit._id) {\n                _context.next = 30;\n                break;\n              }\n\n              if (!uploadedFile) {\n                dataCategory.photo = uploadedImg || 'default-placeholder.png';\n              }\n\n              dataCategory.rating = props.isEdit.rating;\n              dataCategory.owner = props.isEdit.owner;\n              _context.next = 23;\n              return axios.put('/api/product/update/' + props.isEdit._id, dataCategory, {\n                headers: {\n                  Authorization: getToken('token')\n                }\n              });\n\n            case 23:\n              dataProd = _context.sent;\n\n              if (!dataProd.data.error) {\n                _context.next = 26;\n                break;\n              }\n\n              throw Error(dataProd.data.error);\n\n            case 26:\n              props.updatedProd(dataProd.data.updatedProduct, 'edit');\n              toast.dark(dataProd.data.message, {\n                position: \"top-right\",\n                autoClose: 3000,\n                pauseOnHover: false\n              });\n              _context.next = 39;\n              break;\n\n            case 30:\n              dataCategory.rating = [];\n              dataCategory.owner = props.owner;\n              _context.next = 34;\n              return axios.post('/api/product/add', dataCategory, {\n                headers: {\n                  Authorization: getToken('token')\n                }\n              });\n\n            case 34:\n              _dataProd = _context.sent;\n\n              if (!_dataProd.data.error) {\n                _context.next = 37;\n                break;\n              }\n\n              throw Error(_dataProd.data.error.message);\n\n            case 37:\n              props.updatedProd(_dataProd.data.product, 'add');\n              toast.dark(_dataProd.data.message, {\n                position: \"top-right\",\n                autoClose: 3000,\n                pauseOnHover: false\n              });\n\n            case 39:\n              _context.next = 44;\n              break;\n\n            case 41:\n              _context.prev = 41;\n              _context.t0 = _context[\"catch\"](1);\n              toast.error(_context.t0.response ? _context.t0.response.data : _context.t0.message, {\n                position: \"top-right\",\n                autoClose: 3000,\n                pauseOnHover: false\n              });\n\n            case 44:\n              _context.prev = 44;\n              setLoadingCategory(false);\n              setUploadedImg('');\n              setUploadedFile(null);\n              reset();\n              props.onClose();\n              return _context.finish(44);\n\n            case 51:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 41, 44, 51]]);\n    }));\n\n    return function onSubmit(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var triggerUploading = function triggerUploading() {\n    if (hiddenImgValue) {\n      hiddenImgValue.dispatchEvent(new Event(\"change\", {\n        bubbles: true\n      }));\n    }\n  };\n\n  var uploadImg = function uploadImg(event) {\n    if (event.target.files[0]) {\n      setUploadedFile(event.target.files[0]);\n      var reader = new FileReader();\n\n      reader.onload = function (e) {\n        setUploadedImg(e.target.result);\n      };\n\n      reader.readAsDataURL(event.target.files[0]);\n    }\n  };\n\n  var resetImg = function resetImg() {\n    setUploadedImg('');\n    setUploadedFile(null);\n  };\n\n  var selectChangeCategory = function selectChangeCategory(e) {\n    setSubOptions(props.categories[e.target.value].map(function (opt) {\n      return __jsx(\"option\", {\n        key: opt,\n        value: opt\n      }, opt);\n    }));\n  };\n\n  useEffect(function () {\n    setOptions(_Object$keys(props.categories).map(function (opt) {\n      return __jsx(\"option\", {\n        key: opt,\n        value: opt\n      }, opt);\n    }));\n  }, [props.categories]);\n  useEffect(function () {\n    if (props.isEdit._id && props.isEdit.subCategory) {\n      setValue('subCategory', props.isEdit.subCategory);\n    }\n  }, [subOptions]);\n  useEffect(function () {\n    if (props.isEdit._id) {\n      setValue('name', props.isEdit.name);\n      setValue('price', props.isEdit.price);\n      setValue('sale', props.isEdit.sale);\n      setValue('description', props.isEdit.description);\n      setTimeout(function () {\n        setValue('category', props.isEdit.category);\n      }, 0);\n\n      if (props.isEdit.subCategory) {\n        setSubOptions(props.categories[props.isEdit.category].map(function (opt) {\n          return __jsx(\"option\", {\n            key: opt,\n            value: opt\n          }, opt);\n        }));\n      }\n\n      setUploadedImg(props.isEdit.photo);\n    }\n  }, [props.isEdit]);\n  return __jsx(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    encType: \"multipart/form-data\"\n  }, __jsx(UI_ELEMENTS.Input, {\n    type: \"text\",\n    name: \"name\",\n    refBind: register(PRODUCT_NAME),\n    errors: errors.name && errors.name.message || errors.name && errors.name.type === 'containChars' && 'Please include some characters',\n    fullWidth: true,\n    placeholder: \"Name\",\n    size: \"sm\"\n  }), __jsx(UI_ELEMENTS.Input, {\n    type: \"number\",\n    name: \"price\",\n    attr: [{\n      name: 'min',\n      value: 0\n    }, {\n      name: 'max',\n      value: 10000\n    }],\n    refBind: register(ONLY_DIGITS),\n    errors: errors.price && errors.price.message,\n    fullWidth: true,\n    placeholder: \"Price\",\n    size: \"sm\"\n  }), __jsx(UI_ELEMENTS.Input, {\n    type: \"number\",\n    name: \"sale\",\n    attr: [{\n      name: 'min',\n      value: 0\n    }, {\n      name: 'max',\n      value: 100\n    }],\n    refBind: register(ONLY_DIGITS),\n    errors: errors.sale && errors.sale.message,\n    fullWidth: true,\n    placeholder: \"Sale\",\n    size: \"sm\"\n  }), __jsx(\"div\", {\n    className: styles['select-wrap']\n  }, __jsx(\"div\", {\n    className: \"\".concat(styles['single-select-wrap'], \" \").concat(errors.category && errors.category.message || errors.category && errors.category.type === 'selectValue' ? styles['error-field'] : '')\n  }, __jsx(\"select\", {\n    name: \"category\",\n    defaultValue: 'Select a category',\n    ref: register(SELECT_OPTION),\n    onChange: function onChange(e) {\n      return selectChangeCategory(e);\n    }\n  }, __jsx(\"option\", {\n    disabled: true,\n    value: \"Select a category\"\n  }, \"Select a category\"), options), __jsx(\"span\", {\n    className: styles['error-line']\n  }, errors.category && errors.category.message || errors.category && errors.category.type === 'selectValue' && 'Please select a value')), subOptions.length ? __jsx(\"select\", {\n    defaultValue: '',\n    name: \"subCategory\",\n    ref: register\n  }, __jsx(\"option\", {\n    value: \"\",\n    disabled: true\n  }, \"Select a sub category\"), subOptions) : ''), __jsx(\"textarea\", {\n    name: \"description\",\n    placeholder: \"Add Description\",\n    ref: register\n  }), __jsx(\"div\", {\n    className: styles['upload-image-wrap']\n  }, !uploadedImg ? __jsx(\"label\", null, __jsx(Icon, {\n    name: \"upload\"\n  }), __jsx(\"span\", {\n    onClick: triggerUploading\n  }, \"Choose a file\\u2026\"), __jsx(\"input\", {\n    name: \"photo\",\n    type: \"file\",\n    onChange: function onChange(e) {\n      return uploadImg(e);\n    },\n    ref: function ref(input) {\n      return setHiddenImgValue(input);\n    },\n    accept: \"image/*\"\n  })) : __jsx(\"div\", {\n    className: styles['upload-image-wrap_close']\n  }, __jsx(\"span\", {\n    onClick: function onClick() {\n      return resetImg();\n    }\n  }, __jsx(Icon, {\n    name: \"close\"\n  })), __jsx(\"img\", {\n    src: uploadedImg,\n    alt: \"product image\"\n  }))), __jsx(UI_ELEMENTS.Button, {\n    icon: loadingCategory ? {\n      dir: 'right',\n      element: 'loading'\n    } : {},\n    type: \"submit\",\n    text: \"Save\",\n    width: 100,\n    margin: ['0px', '0', '0', 'auto'],\n    attr: [{\n      id: 'saveBtn'\n    }],\n    size: \"sm\"\n  }));\n};\n\nFormAdd.defaultProps = {\n  categories: {}\n};\nexport default FormAdd;","map":null,"metadata":{},"sourceType":"module"}