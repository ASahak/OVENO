{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _JSXStyle from \"styled-jsx/style\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport axios from \"lib/axiosEnv\";\nimport { connect } from \"react-redux\";\nimport { Col, Container, Row } from \"reactstrap\";\n\nconst {\n  getToken\n} = require('utils/auth');\n\nimport ImageProd from \"components/Shop/elements/imageProduct\";\nimport { toast } from \"react-toastify\";\nimport { __SET_LOGGED } from \"store/saga\";\n\nconst EveryRow = props => {\n  const {\n    0: countProd,\n    1: setCountProd\n  } = useState(props.data.count);\n\n  const countIncDec = async type => {\n    if (type === 'dec' && countProd === 1) return;\n    let count = type === 'inc' ? countProd + 1 : countProd - 1;\n\n    try {\n      const {\n        data\n      } = await axios.put('/api/cart/updateCount', {\n        userId: props.userId,\n        id: props.data._id,\n        count\n      }, {\n        headers: {\n          Authorization: getToken('token')\n        }\n      });\n      if (data.error) throw Error(data.error);\n      setCountProd(count);\n      props.incrementDecrement(props.data._id, count);\n    } catch (err) {\n      toast.error(err.response ? err.response.data : err.message, {\n        position: \"top-right\",\n        autoClose: 3000,\n        pauseOnHover: false\n      });\n    }\n  };\n\n  const deleteProduct = async () => {\n    try {\n      const {\n        data\n      } = await axios.delete('/api/cart/deleteProduct', {\n        headers: {\n          Authorization: getToken('token')\n        },\n        data: {\n          userId: props.userId,\n          id: props.data._id\n        }\n      });\n      if (data.error) throw Error(data.error);\n      props.removeField(props.data._id);\n      toast.dark('Product was removed successfully!', {\n        position: \"top-right\",\n        autoClose: 3000,\n        pauseOnHover: false\n      });\n    } catch (err) {\n      toast.error(err.response ? err.response.data : err.message, {\n        position: \"top-right\",\n        autoClose: 3000,\n        pauseOnHover: false\n      });\n    }\n  };\n\n  return __jsx(\"div\", {\n    className: `single-row_cart ${props.data.removed ? 'cart-removed-wrap' : ''}`\n  }, !props.data.removed ? __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"single-row_cart__photo\"\n  }, __jsx(ImageProd, {\n    src: props.data.photo\n  })), __jsx(\"div\", {\n    className: \"single-row_cart__name\"\n  }, __jsx(\"span\", null, props.data.name)), __jsx(\"div\", {\n    className: \"single-row_cart__price\"\n  }, __jsx(\"span\", null, (props.data.sale > 0 ? Math.round(props.data.price - props.data.price * props.data.sale / 100) : props.data.price) * countProd)), __jsx(\"div\", {\n    className: \"single-row_cart__count\"\n  }, __jsx(\"div\", null, __jsx(\"span\", null, countProd), __jsx(\"p\", null, __jsx(\"span\", {\n    className: \"lnr lnr-chevron-up\",\n    onClick: () => countIncDec('inc')\n  }), __jsx(\"span\", {\n    className: \"lnr lnr-chevron-down\",\n    onClick: () => countIncDec('dec')\n  }))), __jsx(\"span\", {\n    className: \"lnr lnr-trash\",\n    onClick: () => deleteProduct()\n  }))) : __jsx(\"div\", {\n    className: \"single-row_cart__removed\"\n  }, \"This Product was removed \", __jsx(\"span\", {\n    className: \"lnr lnr-trash\",\n    onClick: () => deleteProduct()\n  })));\n};\n\nconst Cart = props => {\n  const {\n    0: products,\n    1: setProducts\n  } = useState([]);\n  useEffect(() => {\n    (async () => {\n      if (props.isUser) {\n        const {\n          data\n        } = await axios.get('/api/cart/getCart', {\n          headers: {\n            Authorization: getToken('token')\n          },\n          params: {\n            ids: [...props.isUser.cart.map(id => id._id)]\n          }\n        });\n\n        if (data.error) {\n          console.error(data.error);\n        } else {\n          const newProds = [];\n          props.isUser.cart.map(el => {\n            const find = data.products.find(e => e._id === el._id);\n\n            if (find) {\n              newProds.push(_objectSpread({}, find, {\n                count: el.count\n              }));\n            } else newProds.push({\n              _id: el._id,\n              removed: true\n            });\n          });\n          setProducts(newProds);\n        }\n      }\n    })();\n  }, [props.isUser]);\n\n  const incrementDecrement = (id, count) => {\n    const storeProds = [...props.isUser.cart];\n    const storeIndex = storeProds.findIndex(el => el._id === id);\n\n    if (storeIndex > -1) {\n      storeProds[storeIndex].count = count;\n    }\n\n    props.isUser.cart = storeProds;\n\n    __SET_LOGGED({\n      user: props.isUser\n    }).next();\n  };\n\n  const removeField = id => {\n    const prods = [...products];\n    const matchedProd = prods.findIndex(el => el._id === id);\n\n    if (matchedProd > -1) {\n      prods.splice(matchedProd, 1);\n    }\n\n    setProducts(prods); // Update Cart Modal on header\n\n    const storeProds = [...props.isUser.cart];\n    const storeIndex = storeProds.findIndex(el => el._id === id);\n\n    if (storeIndex > -1) {\n      storeProds.splice(storeIndex, 1);\n    }\n\n    props.isUser.cart = storeProds;\n\n    __SET_LOGGED({\n      user: props.isUser\n    }).next();\n  };\n\n  return __jsx(Container, null, __jsx(Row, null, __jsx(Col, {\n    sm: \"12\"\n  }, __jsx(\"div\", {\n    className: \"jsx-2636193806\" + \" \" + \"cart-main-wrap\"\n  }, __jsx(\"div\", {\n    className: \"jsx-2636193806\" + \" \" + \"cart-header\"\n  }, __jsx(\"span\", {\n    className: \"jsx-2636193806\"\n  }, \"Photo\"), __jsx(\"span\", {\n    className: \"jsx-2636193806\"\n  }, \"Name\"), __jsx(\"span\", {\n    className: \"jsx-2636193806\"\n  }, \"Price\"), __jsx(\"span\", {\n    className: \"jsx-2636193806\"\n  }, \"Count\")), __jsx(\"div\", {\n    className: \"jsx-2636193806\" + \" \" + \"cart-body\"\n  }, products.map(el => __jsx(EveryRow, {\n    key: el._id,\n    userId: props.isUser ? props.isUser._id : '',\n    data: el,\n    removeField: id => removeField(id),\n    incrementDecrement: (id, count) => incrementDecrement(id, count)\n  })))))), __jsx(_JSXStyle, {\n    id: \"2636193806\"\n  }, [\".cart-main-wrap.jsx-2636193806{overflow-y:auto;}\", \".cart-header.jsx-2636193806,.cart-body.jsx-2636193806{min-width:700px;}\"]));\n};\n\nCart.getInitialProps = async ctx => {\n  const {\n    req,\n    res\n  } = ctx;\n  const token = req.headers.cookie;\n  if (!token) res.redirect('/login');\n  return {\n    status: true\n  };\n};\n\nconst mapStateToProps = state => ({\n  isUser: state.auth.user\n});\n\nconst mapDispatchToProps = {};\nexport default connect(mapStateToProps, mapDispatchToProps)(Cart);","map":null,"metadata":{},"sourceType":"module"}