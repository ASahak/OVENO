{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport UI_ELEMENTS from \"components/shared/UI\";\nimport { ONLY_DIGITS, PRODUCT_NAME, SELECT_OPTION } from \"utils\";\nimport Icon from \"components/Icons/icon\";\nimport styles from './style.scss';\nimport { useForm } from \"react-hook-form\";\nimport axios from \"lib/axiosEnv\";\nimport { toast } from \"react-toastify\";\n\nconst {\n  getToken\n} = require('utils/auth');\n\nconst FormAdd = props => {\n  const {\n    0: loadingCategory,\n    1: setLoadingCategory\n  } = useState(false);\n  const {\n    0: uploadedImg,\n    1: setUploadedImg\n  } = useState('');\n  const {\n    0: uploadedFile,\n    1: setUploadedFile\n  } = useState(null);\n  const {\n    0: hiddenImgValue,\n    1: setHiddenImgValue\n  } = useState('');\n  const {\n    0: options,\n    1: setOptions\n  } = useState([]);\n  const {\n    0: subOptions,\n    1: setSubOptions\n  } = useState([]);\n  const {\n    register,\n    handleSubmit,\n    errors,\n    reset,\n    setValue\n  } = useForm({\n    mode: 'onBlur'\n  });\n\n  const onSubmit = async dataCategory => {\n    setLoadingCategory(true);\n\n    try {\n      if (uploadedFile) {\n        const dataForm = new FormData();\n        dataForm.append('photo', uploadedFile);\n        const {\n          data\n        } = await axios.post('/api/product/upload', dataForm, {\n          headers: {\n            Authorization: getToken('token')\n          },\n          \"Accept\": \"application/json\"\n        });\n        if (data.error) throw Error(data.error);\n        dataCategory.photo = data.file.path.replace(/public/g, ''); // Send notification to teh all subscribed users\n\n        await axios.post('/api/sendMail', {\n          mailToSubscribers: true\n        });\n      } else {\n        dataCategory.photo = 'default-placeholder.png';\n      }\n\n      if (props.isEdit._id) {\n        if (!uploadedFile) {\n          dataCategory.photo = uploadedImg || 'default-placeholder.png';\n        }\n\n        dataCategory.rating = props.isEdit.rating;\n        dataCategory.owner = props.isEdit.owner;\n        const dataProd = await axios.put('/api/product/update/' + props.isEdit._id, dataCategory, {\n          headers: {\n            Authorization: getToken('token')\n          }\n        });\n        if (dataProd.data.error) throw Error(dataProd.data.error);\n        props.updatedProd(dataProd.data.updatedProduct, 'edit');\n        toast.dark(dataProd.data.message, {\n          position: \"top-right\",\n          autoClose: 3000,\n          pauseOnHover: false\n        });\n      } else {\n        dataCategory.rating = [];\n        dataCategory.owner = props.owner;\n        const dataProd = await axios.post('/api/product/add', dataCategory, {\n          headers: {\n            Authorization: getToken('token')\n          }\n        });\n        if (dataProd.data.error) throw Error(dataProd.data.error.message);\n        props.updatedProd(dataProd.data.product, 'add');\n        toast.dark(dataProd.data.message, {\n          position: \"top-right\",\n          autoClose: 3000,\n          pauseOnHover: false\n        });\n      }\n    } catch (err) {\n      toast.error(err.response ? err.response.data : err.message, {\n        position: \"top-right\",\n        autoClose: 3000,\n        pauseOnHover: false\n      });\n    } finally {\n      setLoadingCategory(false);\n      setUploadedImg('');\n      setUploadedFile(null);\n      reset();\n      props.onClose();\n    }\n  };\n\n  const triggerUploading = () => {\n    if (hiddenImgValue) {\n      hiddenImgValue.dispatchEvent(new Event(\"change\", {\n        bubbles: true\n      }));\n    }\n  };\n\n  const uploadImg = event => {\n    if (event.target.files[0]) {\n      setUploadedFile(event.target.files[0]);\n      const reader = new FileReader();\n\n      reader.onload = function (e) {\n        setUploadedImg(e.target.result);\n      };\n\n      reader.readAsDataURL(event.target.files[0]);\n    }\n  };\n\n  const resetImg = () => {\n    setUploadedImg('');\n    setUploadedFile(null);\n  };\n\n  const selectChangeCategory = e => {\n    setSubOptions(props.categories[e.target.value].map(opt => __jsx(\"option\", {\n      key: opt,\n      value: opt\n    }, opt)));\n  };\n\n  useEffect(() => {\n    setOptions(_Object$keys(props.categories).map(opt => __jsx(\"option\", {\n      key: opt,\n      value: opt\n    }, opt)));\n  }, [props.categories]);\n  useEffect(() => {\n    if (props.isEdit._id && props.isEdit.subCategory) {\n      setValue('subCategory', props.isEdit.subCategory);\n    }\n  }, [subOptions]);\n  useEffect(() => {\n    if (props.isEdit._id) {\n      setValue('name', props.isEdit.name);\n      setValue('price', props.isEdit.price);\n      setValue('sale', props.isEdit.sale);\n      setValue('description', props.isEdit.description);\n      setTimeout(() => {\n        setValue('category', props.isEdit.category);\n      }, 0);\n\n      if (props.isEdit.subCategory) {\n        setSubOptions(props.categories[props.isEdit.category].map(opt => __jsx(\"option\", {\n          key: opt,\n          value: opt\n        }, opt)));\n      }\n\n      setUploadedImg(props.isEdit.photo);\n    }\n  }, [props.isEdit]);\n  return __jsx(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    encType: \"multipart/form-data\"\n  }, __jsx(UI_ELEMENTS.Input, {\n    type: \"text\",\n    name: \"name\",\n    refBind: register(PRODUCT_NAME),\n    errors: errors.name && errors.name.message || errors.name && errors.name.type === 'containChars' && 'Please include some characters',\n    fullWidth: true,\n    placeholder: \"Name\",\n    size: \"sm\"\n  }), __jsx(UI_ELEMENTS.Input, {\n    type: \"number\",\n    name: \"price\",\n    attr: [{\n      name: 'min',\n      value: 0\n    }, {\n      name: 'max',\n      value: 10000\n    }],\n    refBind: register(ONLY_DIGITS),\n    errors: errors.price && errors.price.message,\n    fullWidth: true,\n    placeholder: \"Price\",\n    size: \"sm\"\n  }), __jsx(UI_ELEMENTS.Input, {\n    type: \"number\",\n    name: \"sale\",\n    attr: [{\n      name: 'min',\n      value: 0\n    }, {\n      name: 'max',\n      value: 100\n    }],\n    refBind: register(ONLY_DIGITS),\n    errors: errors.sale && errors.sale.message,\n    fullWidth: true,\n    placeholder: \"Sale\",\n    size: \"sm\"\n  }), __jsx(\"div\", {\n    className: styles['select-wrap']\n  }, __jsx(\"div\", {\n    className: `${styles['single-select-wrap']} ${errors.category && errors.category.message || errors.category && errors.category.type === 'selectValue' ? styles['error-field'] : ''}`\n  }, __jsx(\"select\", {\n    name: \"category\",\n    defaultValue: 'Select a category',\n    ref: register(SELECT_OPTION),\n    onChange: e => selectChangeCategory(e)\n  }, __jsx(\"option\", {\n    disabled: true,\n    value: \"Select a category\"\n  }, \"Select a category\"), options), __jsx(\"span\", {\n    className: styles['error-line']\n  }, errors.category && errors.category.message || errors.category && errors.category.type === 'selectValue' && 'Please select a value')), subOptions.length ? __jsx(\"select\", {\n    defaultValue: '',\n    name: \"subCategory\",\n    ref: register\n  }, __jsx(\"option\", {\n    value: \"\",\n    disabled: true\n  }, \"Select a sub category\"), subOptions) : ''), __jsx(\"textarea\", {\n    name: \"description\",\n    placeholder: \"Add Description\",\n    ref: register\n  }), __jsx(\"div\", {\n    className: styles['upload-image-wrap']\n  }, !uploadedImg ? __jsx(\"label\", null, __jsx(Icon, {\n    name: \"upload\"\n  }), __jsx(\"span\", {\n    onClick: triggerUploading\n  }, \"Choose a file\\u2026\"), __jsx(\"input\", {\n    name: \"photo\",\n    type: \"file\",\n    onChange: e => uploadImg(e),\n    ref: input => setHiddenImgValue(input),\n    accept: \"image/*\"\n  })) : __jsx(\"div\", {\n    className: styles['upload-image-wrap_close']\n  }, __jsx(\"span\", {\n    onClick: () => resetImg()\n  }, __jsx(Icon, {\n    name: \"close\"\n  })), __jsx(\"img\", {\n    src: uploadedImg,\n    alt: \"product image\"\n  }))), __jsx(UI_ELEMENTS.Button, {\n    icon: loadingCategory ? {\n      dir: 'right',\n      element: 'loading'\n    } : {},\n    type: \"submit\",\n    text: \"Save\",\n    width: 100,\n    margin: ['0px', '0', '0', 'auto'],\n    attr: [{\n      id: 'saveBtn'\n    }],\n    size: \"sm\"\n  }));\n};\n\nFormAdd.defaultProps = {\n  categories: {}\n};\nexport default FormAdd;","map":null,"metadata":{},"sourceType":"module"}