{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Head from 'next/head';\nimport DumpLayout from 'components/shared/Layouts/dump';\nimport Icon from 'components/Icons/icon';\nimport UI_ELEMENTS from 'components/shared/UI';\nimport Link from 'next/link';\nimport { useForm } from 'react-hook-form';\nimport { EMAIL_VALIDATOR, PASSWORD_VALIDATOR } from 'utils';\nimport axios from \"lib/axiosEnv\";\nimport { toast } from \"react-toastify\";\n\nconst {\n  setToken\n} = require('../utils/auth');\n\nconst generateAlert = (reset, setLoadingRegister, typeAlert, message, _timeout) => {\n  reset();\n  setLoadingRegister(false);\n  toast[typeAlert](message, {\n    position: \"top-right\",\n    autoClose: _timeout,\n    pauseOnHover: false\n  });\n};\n\nfunction LoginForm() {\n  const _timeout = 3000;\n  const {\n    0: loadingLogin,\n    1: setLoadingLogin\n  } = useState(false);\n  const {\n    register,\n    handleSubmit,\n    errors,\n    reset\n  } = useForm({\n    mode: 'onBlur'\n  });\n\n  const onSubmit = async dataLogin => {\n    setLoadingLogin(true);\n    const timeStart = new Date().getTime();\n\n    try {\n      const {\n        data\n      } = await axios.post('/api/login/user', dataLogin);\n      if (data.error) throw new Error(data.error);\n      setToken(data.token);\n      location.href = '/';\n    } catch (err) {\n      console.log(err.message, 8);\n      const timeEnd = new Date().getTime();\n\n      if (timeEnd - timeStart > _timeout) {\n        generateAlert(reset, setLoadingLogin, 'error', err.message, _timeout);\n      } else {\n        setTimeout(() => {\n          generateAlert(reset, setLoadingLogin, 'error', err.message, _timeout);\n        }, _timeout - (timeEnd - timeStart));\n      }\n    }\n  };\n\n  return __jsx(\"form\", {\n    className: \"login-form\",\n    onSubmit: handleSubmit(onSubmit)\n  }, __jsx(UI_ELEMENTS.Input, {\n    name: \"email\",\n    type: \"email\",\n    refBind: register(EMAIL_VALIDATOR),\n    fullWidth: true,\n    errors: errors.email && errors.email.message,\n    placeholder: \"Email ID\",\n    size: \"md\"\n  }), __jsx(UI_ELEMENTS.Input, {\n    refBind: register(PASSWORD_VALIDATOR),\n    errors: errors.password && errors.password.message || errors.password && errors.password.type === 'containsDigit' && 'Use 1 ore more numbers' || errors.password && errors.password.type === 'containsUppercase' && 'Use upper and lower case characters',\n    name: \"password\",\n    type: \"password\",\n    fullWidth: true,\n    placeholder: \"Password\",\n    size: \"md\"\n  }), __jsx(UI_ELEMENTS.Button, {\n    type: \"submit\",\n    icon: loadingLogin ? {\n      dir: 'right',\n      element: 'loading'\n    } : {},\n    text: \"Login\",\n    width: 190,\n    size: \"md\"\n  }), __jsx(Link, {\n    href: \"/reset-password\",\n    prefetch: false\n  }, __jsx(\"a\", {\n    className: \"link-to-reset\"\n  }, \"Forgot password? click to reset\")), __jsx(Link, {\n    href: \"/register\",\n    prefetch: false\n  }, __jsx(\"a\", {\n    className: \"link-to-reset\"\n  }, \"I am new here. I want an account\")));\n}\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      className: \"container\"\n    }, __jsx(Head, null, __jsx(\"title\", null, \"Login\")), __jsx(\"main\", null, __jsx(\"div\", {\n      className: \"login-form-container\"\n    }, __jsx(\"div\", {\n      className: \"form-icon\"\n    }, __jsx(Icon, {\n      name: \"user\"\n    })), __jsx(\"h4\", {\n      className: \"title-form\"\n    }, \"Member Login\"), __jsx(LoginForm, null))));\n  }\n\n}\n\nLogin.Layout = DumpLayout;\nexport default Login;","map":null,"metadata":{},"sourceType":"module"}