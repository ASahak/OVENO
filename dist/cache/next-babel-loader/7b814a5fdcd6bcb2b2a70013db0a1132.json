{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { createRef } from 'react';\nimport classes from './home-slider.scss';\nexport default class HomeSlider extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      timer: 0,\n      activeIndex: 0,\n      dotsCount: null,\n      styleWrapper: {}\n    };\n    this.images = ['slider1', 'slider2', 'slider3'];\n    this._slide = this._slide.bind(this);\n    this.touchStart = this.touchStart.bind(this);\n    this.touchMove = this.touchMove.bind(this);\n    this.touchEnd = this.touchEnd.bind(this);\n    this.getSliderPosition = this.getSliderPosition.bind(this);\n    this.slider = React.createRef();\n    this.svg = React.createRef();\n    this.autoPlayInterval = null;\n    this.progressSpinner = null;\n    this.touchX = 0;\n  }\n\n  UNSAFE_componentWillMount() {\n    if (this.props.dots) {\n      this.setState({\n        dotsCount: this.images.length\n      });\n    }\n\n    this.setState({\n      styleWrapper: {\n        'transform': 'translate3d(0px, 0px, 0px)'\n      }\n    });\n  }\n\n  handleVisibilityChange(hidden) {\n    if (document[hidden]) {\n      clearInterval(this.progressSpinner);\n      clearInterval(this.autoPlayInterval);\n    } else {\n      clearInterval(this.progressSpinner);\n      clearInterval(this.autoPlayInterval);\n      this.IntervalProgress();\n      this.AutoPlayWithTimer(this.state.timer);\n    }\n  }\n\n  componentDidMount() {\n    let hidden, visibilityChange;\n\n    if (typeof document.hidden !== 'undefined') {\n      // Opera 12.10 and Firefox 18 and later support\n      hidden = \"hidden\";\n      visibilityChange = 'visibilitychange';\n    } else if (typeof document.msHidden !== 'undefined') {\n      hidden = 'msHidden';\n      visibilityChange = 'msvisibilitychange';\n    } else if (typeof document.webkitHidden !== 'undefined') {\n      hidden = 'webkitHidden';\n      visibilityChange = 'webkitvisibilitychange';\n    }\n\n    if (typeof document.addEventListener === \"undefined\" || hidden === undefined) {\n      console.log(\"This demo requires a browser, such as Google Chrome or Firefox, that supports the Page Visibility API.\");\n    } else {\n      // Handle page visibility change\n      document.addEventListener(visibilityChange, this.handleVisibilityChange.bind(this, hidden), false);\n    } // AutoPlay\n\n\n    if (this.props.autoplay) {\n      let timer = this.props.timer || 3000;\n      this.setState({\n        timer: timer\n      }, () => {\n        this.IntervalProgress();\n        this.AutoPlayWithTimer(timer);\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.autoPlayInterval);\n    clearInterval(this.progressSpinner);\n  }\n\n  touchStart(event) {\n    this.touchX = event.touches[0].pageX;\n  }\n\n  touchMove(event) {\n    clearInterval(this.progressSpinner);\n    clearInterval(this.autoPlayInterval);\n    this.getSliderPosition('touchMove', event.touches[0].pageX);\n  }\n\n  touchEnd(event) {\n    clearInterval(this.progressSpinner);\n    clearInterval(this.autoPlayInterval);\n    this.getSliderPosition('touchEnd', event.changedTouches[0].pageX);\n  }\n\n  IntervalProgress() {\n    let percentage = 0;\n    clearInterval(this.progressSpinner);\n    this.progressSpinner = setInterval(() => {\n      if (this.svg.current && percentage < 100) {\n        percentage += 1;\n        this.svg.current.style.background = 'conic-gradient(#f01b48 ' + percentage + '%, 0, #f4f4f4 66%)';\n      }\n    }, this.state.timer / 100);\n  }\n\n  AutoPlayWithTimer(timer) {\n    this.autoPlayInterval = setInterval(() => {\n      this.IntervalProgress();\n      let _activeIndex = this.state.activeIndex;\n      if (_activeIndex === this.state.dotsCount - 1) _activeIndex = 0;else _activeIndex++;\n      this.setState({\n        activeIndex: _activeIndex\n      }, () => {\n        this.getSliderPosition();\n      });\n    }, timer);\n  }\n\n  Slide(name, index) {\n    return __jsx(\"div\", {\n      key: index,\n      className: classes['main-slider__slide']\n    }, __jsx(\"img\", {\n      src: require('../../../assets/images/global/' + name + '.jpg'),\n      alt: \"\"\n    }));\n  }\n\n  _slide(index) {\n    if (index !== this.state.activeIndex) {\n      clearInterval(this.progressSpinner);\n      this.IntervalProgress();\n      clearInterval(this.autoPlayInterval);\n      this.setState({\n        activeIndex: index\n      }, () => {\n        this.getSliderPosition();\n        this.IntervalProgress();\n        this.props.autoplay && this.AutoPlayWithTimer(this.state.timer);\n      });\n    }\n  }\n\n  getSliderPosition(type, touchX) {\n    let widthSlider = this.slider.current && this.slider.current.getBoundingClientRect().width || 0;\n\n    if (type === 'touchMove') {\n      this.setState({\n        styleWrapper: {\n          'transition': '0s',\n          'transform': 'translate3d(' + -(this.touchX - touchX + widthSlider * this.state.activeIndex) + 'px, 0px, 0px)'\n        }\n      });\n    } else if (type === 'touchEnd') {\n      if (this.touchX > touchX) {\n        let ind = this.state.activeIndex;\n        if (ind === this.state.dotsCount - 1) ind = this.state.dotsCount - 1;else ind++;\n        this.setState({\n          activeIndex: ind\n        }, () => {\n          this.getSliderPosition();\n          this.IntervalProgress();\n          this.AutoPlayWithTimer(this.state.timer);\n        });\n      } else {\n        let ind = this.state.activeIndex;\n        if (ind === 0) ind = 0;else ind--;\n        this.setState({\n          activeIndex: ind\n        }, () => {\n          this.getSliderPosition();\n          this.IntervalProgress();\n          this.AutoPlayWithTimer(this.state.timer);\n        });\n      }\n    } else {\n      this.setState({\n        styleWrapper: {\n          'transform': 'translate3d(' + -(widthSlider * this.state.activeIndex) + 'px, 0px, 0px)'\n        }\n      });\n    }\n  }\n\n  render() {\n    const Dots = () => {\n      const dots = Array(this.state.dotsCount).fill('').map((_, index) => {\n        return __jsx(\"span\", {\n          onClick: () => this._slide(index),\n          className: `${index === this.state.activeIndex ? 'active-bullet' : ''} bullet`,\n          key: index\n        });\n      });\n      return __jsx(\"div\", {\n        className: \"slider-dots\"\n      }, dots);\n    };\n\n    const Spinner = () => {\n      return __jsx(\"div\", {\n        className: \"spinner_wrapper\"\n      }, __jsx(\"div\", {\n        className: \"circle\",\n        ref: this.svg\n      }));\n    };\n\n    return __jsx(\"div\", {\n      className: classes['main-slider'],\n      ref: this.slider\n    }, __jsx(\"div\", {\n      className: classes['main-slider__container'],\n      onTouchStart: this.touchStart,\n      onTouchMove: this.touchMove,\n      onTouchEnd: this.touchEnd\n    }, this.props.autoplay && __jsx(Spinner, null), __jsx(\"div\", {\n      className: classes['main-slider__wrapper'],\n      style: this.state.styleWrapper\n    }, this.images.map(this.Slide))), this.props.dots && __jsx(Dots, null));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}