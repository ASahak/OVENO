{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport axios from \"lib/axiosEnv\";\nimport { connect } from \"react-redux\";\nimport { Col, Container, Row } from \"reactstrap\";\nimport { toast } from \"react-toastify\";\nimport UI_ELEMENTS from \"../components/shared/UI\";\nimport { EMAIL_VALIDATOR, FULL_NAME_VALIDATOR, PASSWORD_VALIDATOR } from \"utils\";\nimport { useForm } from \"react-hook-form\";\nimport ImageProd from \"components/Shop/elements/imageProduct\";\n\nconst {\n  getToken\n} = require('utils/auth');\n\nconst Account = props => {\n  const {\n    0: uploadedFile,\n    1: setUploadedFile\n  } = useState(null);\n  const {\n    0: avatar,\n    1: setAvatar\n  } = useState('');\n  const {\n    0: loadingRegister,\n    1: setLoadingRegister\n  } = useState(false);\n  const {\n    0: updatePassword,\n    1: setUpdatePassword\n  } = useState(false);\n  const {\n    register,\n    handleSubmit,\n    watch,\n    errors,\n    setValue\n  } = useForm({\n    mode: 'onBlur'\n  });\n  const uploadImage = useCallback(e => {\n    if (e.target.files[0]) {\n      setAvatar('');\n      setUploadedFile(e.target.files[0]);\n      const reader = new FileReader();\n\n      reader.onload = function (e) {\n        setAvatar(e.target.result);\n      };\n\n      reader.readAsDataURL(e.target.files[0]);\n    }\n  }, []);\n  useEffect(() => {\n    (async () => {\n      if (props.isUser) {\n        setAvatar(props.isUser.avatar);\n        const {\n          name,\n          email\n        } = props.isUser;\n        setValue('name', name);\n        setValue('email', email);\n      }\n    })();\n  }, [props.isUser]);\n\n  const onSubmit = async dataForm => {\n    setLoadingRegister(true);\n\n    try {\n      if (uploadedFile) {\n        const formData = new FormData();\n        formData.append('photo', uploadedFile);\n        const dataImage = await axios.post('/api/product/upload', formData, {\n          headers: {\n            Authorization: getToken('token')\n          },\n          \"Accept\": \"application/json\"\n        });\n        if (dataImage.data.error) throw dataImage.data.error;\n        dataForm.avatar = dataImage.data.file.path.replace(/public/g, '');\n      } else {\n        dataForm.avatar = props.isUser.avatar;\n      }\n\n      const {\n        data\n      } = await axios.put('/api/update/user', _objectSpread({\n        _id: props.isUser._id,\n        email: dataForm.email\n      }, dataForm.password && {\n        password: dataForm.password,\n        password_repeat: dataForm.password\n      }, {\n        name: dataForm.name,\n        avatar: dataForm.avatar\n      }));\n      if (data.error) throw data.error;\n      toast.dark('Account updated successfully!', {\n        position: \"top-right\",\n        autoClose: 3000,\n        pauseOnHover: false\n      });\n    } catch (err) {\n      toast.error(err.response ? err.response.data : err.message, {\n        position: \"top-right\",\n        autoClose: 3000,\n        pauseOnHover: false\n      });\n    } finally {\n      setUploadedFile('');\n      setLoadingRegister(false);\n    }\n  };\n\n  const password = useRef({});\n  password.current = watch(\"password\", \"\");\n  return __jsx(Container, null, __jsx(Row, null, __jsx(Col, {\n    sm: {\n      size: 12\n    },\n    md: {\n      size: 10,\n      offset: 1\n    },\n    lg: {\n      size: 8,\n      offset: 2\n    }\n  }, __jsx(\"div\", {\n    className: \"contact-main-wrap\"\n  }, __jsx(\"div\", {\n    className: \"avatar-wrap\"\n  }, props.isUser && __jsx(\"label\", {\n    htmlFor: \"imageAvatar\",\n    className: \"image-upload\"\n  }, __jsx(\"input\", {\n    type: \"file\",\n    id: \"imageAvatar\",\n    hidden: true,\n    onChange: uploadImage\n  }), __jsx(\"span\", {\n    className: \"lnr lnr-camera\"\n  })), __jsx(ImageProd, {\n    src: avatar\n  })), __jsx(\"form\", {\n    onSubmit: handleSubmit(onSubmit)\n  }, __jsx(UI_ELEMENTS.Input, {\n    type: \"text\",\n    name: \"name\",\n    refBind: register(FULL_NAME_VALIDATOR),\n    errors: errors.name && errors.name.message,\n    fullWidth: true,\n    placeholder: \"Name\",\n    size: \"md\"\n  }), __jsx(UI_ELEMENTS.Input, {\n    type: \"email\",\n    name: \"email\",\n    attr: [{\n      name: 'disabled',\n      value: true\n    }],\n    refBind: register(EMAIL_VALIDATOR),\n    errors: errors.email && errors.email.message,\n    fullWidth: true,\n    placeholder: \"Email ID\",\n    size: \"md\"\n  }), updatePassword ? __jsx(React.Fragment, null, __jsx(UI_ELEMENTS.Input, {\n    refBind: register(PASSWORD_VALIDATOR),\n    errors: errors.password && errors.password.message || errors.password && errors.password.type === 'containsDigit' && 'Use 1 ore more numbers' || errors.password && errors.password.type === 'containsUppercase' && 'Use upper and lower case characters',\n    name: \"password\",\n    type: \"password\",\n    fullWidth: true,\n    placeholder: \"New Password\",\n    size: \"md\"\n  }), __jsx(UI_ELEMENTS.Input, {\n    refBind: register({\n      validate: value => value === password.current || \"The passwords do not match\"\n    }),\n    errors: errors.password_repeat && errors.password_repeat.message,\n    name: \"password_repeat\",\n    type: \"password\",\n    fullWidth: true,\n    placeholder: \"Confirm Password\",\n    size: \"md\"\n  })) : null, __jsx(\"div\", {\n    className: \"button-wrap-account\"\n  }, __jsx(\"a\", {\n    onClick: () => setUpdatePassword(prevState => !prevState)\n  }, !updatePassword ? 'Change password' : 'Unset password'), __jsx(UI_ELEMENTS.Button, {\n    disabled: !props.isUser,\n    margin: ['0px', '0', '0', 'auto'],\n    icon: loadingRegister ? {\n      dir: 'right',\n      element: 'loading'\n    } : {},\n    type: \"submit\",\n    text: \"Save\",\n    width: 150\n  })))))));\n};\n\nAccount.getInitialProps = async ctx => {\n  const {\n    req,\n    res\n  } = ctx;\n  const token = req.headers.cookie;\n  if (!token) res.redirect('/');\n  return {\n    status: true\n  };\n};\n\nconst mapStateToProps = state => ({\n  isUser: state.auth.user\n});\n\nconst mapDispatchToProps = {};\nexport default connect(mapStateToProps, mapDispatchToProps)(Account);","map":null,"metadata":{},"sourceType":"module"}