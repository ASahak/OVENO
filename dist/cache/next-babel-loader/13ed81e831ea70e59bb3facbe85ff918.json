{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { useState, useRef, useCallback } from 'react';\nimport { useRouter } from 'next/router';\nimport axios from \"lib/axiosEnv\";\nimport { connect } from \"react-redux\";\nimport { Col, Container, Row } from \"reactstrap\";\nimport { toast } from \"react-toastify\";\nimport UI_ELEMENTS from \"../components/shared/UI\";\nimport { EMAIL_VALIDATOR, PASSWORD_VALIDATOR } from \"utils\";\nimport Head from \"next/head\";\nimport { useForm } from \"react-hook-form\";\n\nvar ResetPassword = function ResetPassword(props) {\n  var router = useRouter();\n\n  var _useState = useState(false),\n      loading = _useState[0],\n      setLoading = _useState[1];\n\n  var _useForm = useForm({\n    mode: 'onBlur'\n  }),\n      register = _useForm.register,\n      handleSubmit = _useForm.handleSubmit,\n      watch = _useForm.watch,\n      errors = _useForm.errors,\n      reset = _useForm.reset;\n\n  var onSubmit =\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(dataForm) {\n      var _ref2, data, _ref3, _data;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setLoading(true);\n              _context.prev = 1;\n\n              if (!router.query.token) {\n                _context.next = 13;\n                break;\n              }\n\n              _context.next = 5;\n              return axios.put('/api/reset-password', {\n                resetLink: router.query.token,\n                newPassword: dataForm.password\n              });\n\n            case 5:\n              _ref2 = _context.sent;\n              data = _ref2.data;\n\n              if (!data.error) {\n                _context.next = 9;\n                break;\n              }\n\n              throw Error(data.error);\n\n            case 9:\n              toast.dark(data.message, {\n                position: \"top-right\",\n                autoClose: 3000,\n                pauseOnHover: false\n              });\n              setTimeout(function () {\n                location.href = '/login';\n              }, 3000);\n              _context.next = 20;\n              break;\n\n            case 13:\n              _context.next = 15;\n              return axios.put('/api/forget-password', dataForm);\n\n            case 15:\n              _ref3 = _context.sent;\n              _data = _ref3.data;\n\n              if (!_data.error) {\n                _context.next = 19;\n                break;\n              }\n\n              throw Error(_data.error);\n\n            case 19:\n              toast.dark(_data.message, {\n                position: \"top-right\",\n                autoClose: 3000,\n                pauseOnHover: false\n              });\n\n            case 20:\n              _context.next = 25;\n              break;\n\n            case 22:\n              _context.prev = 22;\n              _context.t0 = _context[\"catch\"](1);\n              toast.error(_context.t0.message, {\n                position: \"top-right\",\n                autoClose: 3000,\n                pauseOnHover: false\n              });\n\n            case 25:\n              _context.prev = 25;\n              setLoading(false);\n              return _context.finish(25);\n\n            case 28:\n              reset();\n\n            case 29:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 22, 25, 28]]);\n    }));\n\n    return function onSubmit(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var password = useRef({});\n  password.current = watch(\"password\", \"\");\n  var Title = useCallback(function () {\n    return !router.query.token ? 'Forget Password' : 'Reset Password';\n  }, [router.query.token]);\n  return __jsx(Container, null, __jsx(Head, null, __jsx(\"title\", null, Title())), __jsx(Row, null, __jsx(Col, {\n    sm: {\n      size: 12\n    },\n    md: {\n      size: 10,\n      offset: 1\n    },\n    lg: {\n      size: 8,\n      offset: 2\n    }\n  }, __jsx(\"div\", {\n    className: \"contact-main-wrap\"\n  }, __jsx(\"form\", {\n    onSubmit: handleSubmit(onSubmit)\n  }, __jsx(\"h3\", null, Title()), !router.query.token ? __jsx(UI_ELEMENTS.Input, {\n    type: \"email\",\n    name: \"email\",\n    refBind: register(EMAIL_VALIDATOR),\n    errors: errors.email && errors.email.message,\n    fullWidth: true,\n    placeholder: \"Email ID\",\n    size: \"md\"\n  }) : __jsx(React.Fragment, null, __jsx(UI_ELEMENTS.Input, {\n    refBind: register(PASSWORD_VALIDATOR),\n    errors: errors.password && errors.password.message || errors.password && errors.password.type === 'containsDigit' && 'Use 1 ore more numbers' || errors.password && errors.password.type === 'containsUppercase' && 'Use upper and lower case characters',\n    name: \"password\",\n    type: \"password\",\n    fullWidth: true,\n    placeholder: \"New Password\",\n    size: \"md\"\n  }), __jsx(UI_ELEMENTS.Input, {\n    refBind: register({\n      validate: function validate(value) {\n        return value === password.current || \"The passwords do not match\";\n      }\n    }),\n    errors: errors.password_repeat && errors.password_repeat.message,\n    name: \"password_repeat\",\n    type: \"password\",\n    fullWidth: true,\n    placeholder: \"Confirm Password\",\n    size: \"md\"\n  })), __jsx(UI_ELEMENTS.Button, {\n    icon: loading ? {\n      dir: 'right',\n      element: 'loading'\n    } : {},\n    type: \"submit\",\n    text: router.query.token ? 'Reset' : 'Send',\n    width: 100\n  }))))));\n};\n\nResetPassword.getInitialProps =\n/*#__PURE__*/\nfunction () {\n  var _ref4 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(ctx) {\n    var req, res, token;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            req = ctx.req, res = ctx.res;\n            token = req && req.headers.cookie;\n            if (token) res.redirect('/');\n            return _context2.abrupt(\"return\", {\n              status: true\n            });\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x2) {\n    return _ref4.apply(this, arguments);\n  };\n}();\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    isUser: state.auth.user\n  };\n};\n\nvar mapDispatchToProps = {};\nexport default connect(mapStateToProps, mapDispatchToProps)(ResetPassword);","map":null,"metadata":{},"sourceType":"module"}