{"ast":null,"code":"var __jsx = React.createElement;\nimport styles from \"./badge.scss\";\nimport React from \"react\";\nimport Icon from \"components/Icons/icon\";\nimport Link from 'next/link';\nimport ImageProd from \"components/Shop/elements/imageProduct\";\nimport { connect } from \"react-redux\";\nimport axios from \"lib/axiosEnv\";\nimport { toast } from \"react-toastify\";\n\nconst {\n  getToken\n} = require('utils/auth');\n\nimport { __SET_LOGGED } from 'store/saga';\n\nconst Badge = props => {\n  const star = Math.round(props.mainData.rating.reduce((acc, item) => {\n    acc += item.value;\n    return acc;\n  }, 0) / props.mainData.rating.length);\n\n  const addToCartProd = async () => {\n    try {\n      if (!props.loggedUser) throw Error('Please login before add product!');\n\n      if (props.loggedUser && props.mainData && props.loggedUser.cart.some(el => el._id === props.mainData._id)) {\n        throw Error(\"You have this product in your cart already!\");\n      }\n\n      const {\n        data\n      } = await axios.post('/api/cart/addToCart', {\n        userId: props.loggedUser._id,\n        id: props.mainData._id,\n        count: 1\n      }, {\n        headers: {\n          Authorization: getToken('token')\n        }\n      });\n      if (data.error) throw Error(data.error);\n      props.loggedUser.cart.push({\n        _id: props.mainData._id,\n        count: 1\n      });\n\n      __SET_LOGGED({\n        user: props.loggedUser\n      }).next();\n\n      toast.dark(data.message, {\n        position: \"top-right\",\n        autoClose: 3000,\n        pauseOnHover: false\n      });\n    } catch (err) {\n      toast.error(err.response ? err.response.data : err.message, {\n        position: \"top-right\",\n        autoClose: 3000,\n        pauseOnHover: false\n      });\n    }\n  };\n\n  return __jsx(\"div\", {\n    className: styles['slider_item']\n  }, __jsx(\"div\", {\n    className: styles['slider_item-top']\n  }, __jsx(ImageProd, {\n    src: props.mainData.photo\n  }), props.mainData.sale !== 0 && __jsx(\"span\", {\n    className: styles['slider_item-sale_badge']\n  }, \"Sale -\", props.mainData.sale, \"%\"), __jsx(\"div\", {\n    className: styles['slider_item-top_actions-links']\n  }, __jsx(\"span\", {\n    className: \"lnr lnr-cart\",\n    onClick: () => addToCartProd()\n  }), __jsx(Link, {\n    href: \"/product/\" + props.mainData._id\n  }, __jsx(\"a\", null, __jsx(\"span\", {\n    className: \"lnr lnr-eye\"\n  })))), __jsx(\"h4\", null, props.mainData.name)), __jsx(\"div\", {\n    className: styles['slider_item-bottom']\n  }, __jsx(\"div\", {\n    className: styles['slider_item-bottom_price']\n  }, props.mainData.sale !== 0 ? __jsx(React.Fragment, null, __jsx(\"span\", {\n    className: styles['slider_item-bottom_price_real']\n  }, Math.round(props.mainData.price - props.mainData.price * props.mainData.sale / 100), \"$\"), __jsx(\"span\", {\n    className: styles['slider_item-bottom_price_del']\n  }, props.mainData.price, \"$\")) : __jsx(\"span\", {\n    className: styles['slider_item-bottom_price_real']\n  }, props.mainData.price, \"$\")), __jsx(\"div\", {\n    className: styles['slider_item-bottom_stars']\n  }, Array(5).fill('').map((_, index) => {\n    if (star > index) {\n      return __jsx(\"span\", {\n        className: \"lnr lnr-star\",\n        key: index\n      });\n    } else {\n      return __jsx(\"span\", {\n        className: \"lnr lnr-star half\",\n        key: index\n      });\n    }\n  }))), !props.noAccessAdmin && (props.isAdmin || props.loggedUser && props.loggedUser._id && props.mainData.owner) ? __jsx(\"div\", {\n    className: styles['user-options']\n  }, __jsx(\"span\", {\n    onClick: () => props.editProduct(props.mainData)\n  }, __jsx(Icon, {\n    name: \"pencil\"\n  })), __jsx(\"span\", {\n    onClick: () => props.removeProduct(props.mainData._id)\n  }, __jsx(Icon, {\n    name: \"delete\"\n  }))) : '');\n};\n\nconst mapStateToProps = state => ({\n  loggedUser: state.auth.user\n});\n\nconst mapDispatchToProps = {};\nexport default connect(mapStateToProps, mapDispatchToProps)(Badge);","map":null,"metadata":{},"sourceType":"module"}