{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Head from \"next/head\";\nimport { Col, Container, Row } from \"reactstrap\";\nimport { useForm } from \"react-hook-form\";\nimport UI_ELEMENTS from \"components/shared/UI\";\nimport { EMAIL_VALIDATOR, FULL_NAME_VALIDATOR } from \"utils\";\nimport axios from \"lib/axiosEnv\";\nimport { toast } from \"react-toastify\";\n\nvar Contact = function Contact() {\n  var _useState = useState(false),\n      loading = _useState[0],\n      setLoading = _useState[1];\n\n  var _useForm = useForm({\n    mode: 'onBlur'\n  }),\n      register = _useForm.register,\n      handleSubmit = _useForm.handleSubmit,\n      errors = _useForm.errors,\n      reset = _useForm.reset;\n\n  var onSubmit =\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(dataForm) {\n      var _ref2, data;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              setLoading(true);\n              _context.next = 4;\n              return axios.post('/api/sendMail', dataForm);\n\n            case 4:\n              _ref2 = _context.sent;\n              data = _ref2.data;\n\n              if (!data.error) {\n                _context.next = 8;\n                break;\n              }\n\n              throw Error(data.error);\n\n            case 8:\n              toast.dark(data.message, {\n                position: \"top-right\",\n                autoClose: 3000,\n                pauseOnHover: false\n              });\n              _context.next = 14;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](0);\n              toast.error(_context.t0.message, {\n                position: \"top-right\",\n                autoClose: 3000,\n                pauseOnHover: false\n              });\n\n            case 14:\n              _context.prev = 14;\n              setLoading(false);\n              return _context.finish(14);\n\n            case 17:\n              reset();\n\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 11, 14, 17]]);\n    }));\n\n    return function onSubmit(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(\"div\", null, __jsx(Head, null, __jsx(\"title\", null, \"Home\")), __jsx(Container, null, __jsx(Row, null, __jsx(Col, {\n    sm: {\n      size: 12\n    },\n    md: {\n      size: 10,\n      offset: 1\n    },\n    lg: {\n      size: 8,\n      offset: 2\n    }\n  }, __jsx(\"div\", {\n    className: \"contact-main-wrap\"\n  }, __jsx(\"h2\", null, \"Get In Touch\"), __jsx(\"form\", {\n    onSubmit: handleSubmit(onSubmit)\n  }, __jsx(UI_ELEMENTS.Input, {\n    type: \"text\",\n    name: \"name\",\n    refBind: register(FULL_NAME_VALIDATOR),\n    errors: errors.name && errors.name.message,\n    fullWidth: true,\n    placeholder: \"Name\",\n    size: \"md\"\n  }), __jsx(UI_ELEMENTS.Input, {\n    name: \"email\",\n    type: \"email\",\n    refBind: register(EMAIL_VALIDATOR),\n    fullWidth: true,\n    errors: errors.email && errors.email.message,\n    placeholder: \"Email ID\",\n    size: \"md\"\n  }), __jsx(\"div\", {\n    className: \"textarea-field \".concat(errors.description ? 'error-field-contact' : '')\n  }, __jsx(\"textarea\", {\n    name: \"description\",\n    placeholder: \"Add Description\",\n    ref: register({\n      required: true\n    }),\n    rows: \"4\"\n  }), errors.description && __jsx(\"span\", {\n    className: \"error-line\"\n  }, \"This field is required\")), __jsx(UI_ELEMENTS.Button, {\n    icon: loading ? {\n      dir: 'right',\n      element: 'loading'\n    } : {},\n    type: \"submit\",\n    text: \"Send\",\n    width: 100,\n    margin: ['0px', '0', '0', 'auto'],\n    attr: [{\n      id: 'saveBtn'\n    }],\n    size: \"sm\"\n  })))))));\n};\n\nexport default Contact;","map":null,"metadata":{},"sourceType":"module"}